
EXTI DRIVER.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000668  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007bc  080007bc  000107c4  2**0
                  CONTENTS
  4 .ARM          00000000  080007bc  080007bc  000107c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007bc  080007c4  000107c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007bc  080007bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007c0  080007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000000  080007c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080007c4  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003870  00000000  00000000  000107ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000090d  00000000  00000000  0001405d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000930  00000000  00000000  0001496a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  000152a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00015468  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002644  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000260b  00000000  00000000  00017c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000103a0  00000000  00000000  0001a227  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002a5c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000050c  00000000  00000000  0002a644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000780 	.word	0x08000780

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000780 	.word	0x08000780

08000170 <HardFault_Handler>:
 */

#include "Cortex_Mx_OS_Porting.h"

  void HardFault_Handler(void)
  {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	  while(1);
 8000174:	e7fe      	b.n	8000174 <HardFault_Handler+0x4>

08000176 <MemManage_Handler>:
  }
  void	MemManage_Handler(void)
  {
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	  while(1);
 800017a:	e7fe      	b.n	800017a <MemManage_Handler+0x4>

0800017c <BusFault_Handler>:
  }
  void	BusFault_Handler(void)
  {
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	  while(1);
 8000180:	e7fe      	b.n	8000180 <BusFault_Handler+0x4>

08000182 <UsageFault_Handler>:
  }
  void	UsageFault_Handler(void)
  {
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	  while(1);
 8000186:	e7fe      	b.n	8000186 <UsageFault_Handler+0x4>

08000188 <SVC_Handler>:


  __attribute((naked)) void SVC_Handler ()	//Don't create a stack for this function
  {

  	__asm("TST LR, #0x04 \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8009 	mrsne	r0, PSP
 8000196:	f000 b829 	b.w	80001ec <OS_SVC_Services>
  			"ITE EQ \n\t"
  			"MRSEQ R0, MSP \n\t"
  			"MRSNE R0, PSP \n\t"
  			"B OS_SVC_Services");
  }
 800019a:	bf00      	nop

0800019c <HW_init>:



  void HW_init()
  {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	  // init HW
	  // 8MHz
	  // 1 count -> 0.125 us
	  // x count -> 1 ms
	  // x = 8000 count
  }
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <FIFO_init>:
#include "MY_RTOS_FIFO.h"


//FIFO APIs
FIFO_Buf_status FIFO_init(FIFO_Buf_t* fifo,element_type* buff,uint32_t length)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	if (buff==NULL)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <FIFO_init+0x16>
		return FIFO_null;
 80001ba:	2303      	movs	r3, #3
 80001bc:	e011      	b.n	80001e2 <FIFO_init+0x3a>

	fifo->base = buff;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	609a      	str	r2, [r3, #8]
	fifo->tail = fifo->base;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	68da      	ldr	r2, [r3, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	611a      	str	r2, [r3, #16]
	fifo->count = 0;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	2200      	movs	r2, #0
 80001d8:	605a      	str	r2, [r3, #4]
	fifo->length = length;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]

	return FIFO_no_error;
 80001e0:	2300      	movs	r3, #0

}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <OS_SVC_Services>:
Task_ref MY_RTOS_IDEL_Task;


// to execute specific service
void OS_SVC_Services(int * Stack_Frame_Pointer)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> R0 -> argument 0 -> Stack_Frame_Pointer
	//OS_SVC_Set Stack : {R0,R1,R2,R3,R12,LR,PC,XPSR} (return to PC - 2 to reach the SVC number)
	unsigned char SVC_number;
	SVC_number = *((unsigned char *)((unsigned char *)Stack_Frame_Pointer[6])-2);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3318      	adds	r3, #24
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3b02      	subs	r3, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	2b03      	cmp	r3, #3
 8000204:	d80b      	bhi.n	800021e <OS_SVC_Services+0x32>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <OS_SVC_Services+0x20>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	0800021d 	.word	0x0800021d
 8000210:	0800021d 	.word	0x0800021d
 8000214:	0800021d 	.word	0x0800021d
 8000218:	0800021d 	.word	0x0800021d
	{
	case 0:	//Activate Task

		break;
 800021c:	bf00      	nop
		break;
	case 3:	//

		break;
	}
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <PendSV_Handler>:



void PendSV_Handler ()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <MY_RTOS_Create_MainStack>:

}


void MY_RTOS_Create_MainStack()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	OS_CONROL._S_MSP_Task =  &_estack;
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <MY_RTOS_Create_MainStack+0x34>)
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MY_RTOS_Create_MainStack+0x38>)
 800023c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONROL._E_MSP_Task = OS_CONROL._S_MSP_Task- Main_Stack_Size;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MY_RTOS_Create_MainStack+0x38>)
 8000242:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000246:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <MY_RTOS_Create_MainStack+0x38>)
 800024c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Algned 8 Bytes Space between Main Task & PSP Tasks
	OS_CONROL.PSP_Task_Locator = (OS_CONROL._E_MSP_Task - 8);
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <MY_RTOS_Create_MainStack+0x38>)
 8000252:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000256:	3b08      	subs	r3, #8
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <MY_RTOS_Create_MainStack+0x38>)
 800025a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20002800 	.word	0x20002800
 800026c:	20000030 	.word	0x20000030

08000270 <MY_RTOS_init>:
MY_RTOS_ErrorID MY_RTOS_init (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = NoError;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	//update OS mode (OS_Suspended)
	OS_CONROL.OS_Mode_ID = OS_Suspend;
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MY_RTOS_init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//specify the main stack for OS
	MY_RTOS_Create_MainStack();
 8000282:	f7ff ffd7 	bl	8000234 <MY_RTOS_Create_MainStack>
	//Create OS Ready Queue
	if(FIFO_init(&Ready_Queue,Ready_Queue_FIFO,100) != FIFO_no_error)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	4913      	ldr	r1, [pc, #76]	; (80002d8 <MY_RTOS_init+0x68>)
 800028a:	4814      	ldr	r0, [pc, #80]	; (80002dc <MY_RTOS_init+0x6c>)
 800028c:	f7ff ff8c 	bl	80001a8 <FIFO_init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <MY_RTOS_init+0x2c>
	{
		error += Ready_Queue_init_error;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	3301      	adds	r3, #1
 800029a:	71fb      	strb	r3, [r7, #7]
	}

	//configure idle Task
	strcpy(MY_RTOS_IDEL_Task.Task_Name,"IDEL_Task");
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MY_RTOS_init+0x70>)
 800029e:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <MY_RTOS_init+0x74>)
 80002a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a2:	c303      	stmia	r3!, {r0, r1}
 80002a4:	801a      	strh	r2, [r3, #0]
	MY_RTOS_IDEL_Task.priority = 255;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MY_RTOS_init+0x78>)
 80002a8:	22ff      	movs	r2, #255	; 0xff
 80002aa:	711a      	strb	r2, [r3, #4]
	MY_RTOS_IDEL_Task.p_TaskEntry =MY_RTOS_idel_Task;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MY_RTOS_init+0x78>)
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <MY_RTOS_init+0x7c>)
 80002b0:	609a      	str	r2, [r3, #8]
	MY_RTOS_IDEL_Task.stack_size = 300;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MY_RTOS_init+0x78>)
 80002b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b8:	601a      	str	r2, [r3, #0]

	error += MY_RTOS_Creat_Task(&MY_RTOS_IDEL_Task);
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <MY_RTOS_init+0x78>)
 80002bc:	f000 f85a 	bl	8000374 <MY_RTOS_Creat_Task>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4413      	add	r3, r2
 80002c8:	71fb      	strb	r3, [r7, #7]





	return error;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000030 	.word	0x20000030
 80002d8:	20000220 	.word	0x20000220
 80002dc:	2000001c 	.word	0x2000001c
 80002e0:	200001f8 	.word	0x200001f8
 80002e4:	08000798 	.word	0x08000798
 80002e8:	200001dc 	.word	0x200001dc
 80002ec:	080002f1 	.word	0x080002f1

080002f0 <MY_RTOS_idel_Task>:

void MY_RTOS_idel_Task()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("NOP");
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <MY_RTOS_idel_Task+0x4>

080002f8 <MY_RTOS_Create_TaskStack>:
	}
}

void MY_RTOS_Create_TaskStack(Task_ref* Tref)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 * ===========
	 * r5, r6, r7, r8, r9, r10, r11 (Saved/Restored Manually)
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	461a      	mov	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP --;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	1f1a      	subs	r2, r3, #4
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; //Dummy _XPSR should T = 1 to avoid bus fault //0x01000000
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800031c:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP --;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	1f1a      	subs	r2, r3, #4
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int) Tref -> p_TaskEntry; //PC
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP --; // LR = 0xFFFFFFFD (EXC_RETURN) Returns to thread with PSP
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	1f1a      	subs	r2, r3, #4
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f06f 0202 	mvn.w	r2, #2
 8000344:	601a      	str	r2, [r3, #0]

	for (int j=0 ; j<13 ; j++) // to intialize all the 13 register (r0 -> r12) to be ZERO
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00b      	b.n	8000364 <MY_RTOS_Create_TaskStack+0x6c>
	{
		Tref ->Current_PSP--;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	1f1a      	subs	r2, r3, #4
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
	for (int j=0 ; j<13 ; j++) // to intialize all the 13 register (r0 -> r12) to be ZERO
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b0c      	cmp	r3, #12
 8000368:	ddf0      	ble.n	800034c <MY_RTOS_Create_TaskStack+0x54>
	}
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <MY_RTOS_Creat_Task>:

MY_RTOS_ErrorID MY_RTOS_Creat_Task(Task_ref* Tref)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	MY_RTOS_ErrorID error = NoError;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

	// Create it's  own PSP Stack
	Tref -> _S_PSP_Task = OS_CONROL.PSP_Task_Locator;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MY_RTOS_Creat_Task+0x58>)
 8000382:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	611a      	str	r2, [r3, #16]
	Tref -> _E_PSP_Task = Tref -> _S_PSP_Task - Tref -> stack_size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691a      	ldr	r2, [r3, #16]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1ad2      	subs	r2, r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	615a      	str	r2, [r3, #20]


	// Check task stack size exceeded the PSP stack
	if (Tref -> _E_PSP_Task < (unsigned int) (&(_eheap)))
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <MY_RTOS_Creat_Task+0x5c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d201      	bcs.n	80003a6 <MY_RTOS_Creat_Task+0x32>
	{
		return Task_exceeded_StackSize;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e00d      	b.n	80003c2 <MY_RTOS_Creat_Task+0x4e>
	}

	// Aligned 8 bytes between Task PSP and other
	OS_CONROL.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	3b08      	subs	r3, #8
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <MY_RTOS_Creat_Task+0x58>)
 80003ae:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MY_RTOS_Create_TaskStack(Tref);
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ffa0 	bl	80002f8 <MY_RTOS_Create_TaskStack>


	// Task State update -> Suspend
	Tref->Task_State = Suspend;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a


	return error;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]

}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000030 	.word	0x20000030
 80003d0:	200006b8 	.word	0x200006b8

080003d4 <task1>:

void HW_init();
Task_ref Task1, Task2, Task3;

void task1()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	while(1)
 80003d8:	e7fe      	b.n	80003d8 <task1+0x4>

080003da <task2>:
		//Task1 Code
	}
}

void task2()
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
	while(1)
 80003de:	e7fe      	b.n	80003de <task2+0x4>

080003e0 <task3>:
		//Task1 Code
	}
}

void task3()
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	while(1)
 80003e4:	e7fe      	b.n	80003e4 <task3+0x4>
	...

080003e8 <main>:
	{
		//Task1 Code
	}
}
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]

	//HW_init (Initialize ClockTree, ResetController )
	HW_init();
 80003f2:	f7ff fed3 	bl	800019c <HW_init>

	if(MY_RTOS_init() != NoError)
 80003f6:	f7ff ff3b 	bl	8000270 <MY_RTOS_init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d000      	beq.n	8000402 <main+0x1a>
		while (1);
 8000400:	e7fe      	b.n	8000400 <main+0x18>

	Task1.stack_size = 1024;
 8000402:	4b26      	ldr	r3, [pc, #152]	; (800049c <main+0xb4>)
 8000404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000408:	601a      	str	r2, [r3, #0]
	Task1.priority =3;
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <main+0xb4>)
 800040c:	2203      	movs	r2, #3
 800040e:	711a      	strb	r2, [r3, #4]
	Task1.p_TaskEntry = task1;
 8000410:	4b22      	ldr	r3, [pc, #136]	; (800049c <main+0xb4>)
 8000412:	4a23      	ldr	r2, [pc, #140]	; (80004a0 <main+0xb8>)
 8000414:	609a      	str	r2, [r3, #8]
	strcpy(Task1.Task_Name , "task1");
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <main+0xbc>)
 8000418:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <main+0xc0>)
 800041a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800041e:	6018      	str	r0, [r3, #0]
 8000420:	3304      	adds	r3, #4
 8000422:	8019      	strh	r1, [r3, #0]

	Task2.stack_size = 1024;
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <main+0xc4>)
 8000426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800042a:	601a      	str	r2, [r3, #0]
	Task2.priority =3;
 800042c:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <main+0xc4>)
 800042e:	2203      	movs	r2, #3
 8000430:	711a      	strb	r2, [r3, #4]
	Task2.p_TaskEntry = task2;
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <main+0xc4>)
 8000434:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <main+0xc8>)
 8000436:	609a      	str	r2, [r3, #8]
	strcpy(Task1.Task_Name , "task2");
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <main+0xbc>)
 800043a:	4a1e      	ldr	r2, [pc, #120]	; (80004b4 <main+0xcc>)
 800043c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000440:	6018      	str	r0, [r3, #0]
 8000442:	3304      	adds	r3, #4
 8000444:	8019      	strh	r1, [r3, #0]

	Task3.stack_size = 1024;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <main+0xd0>)
 8000448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044c:	601a      	str	r2, [r3, #0]
	Task3.priority =3;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <main+0xd0>)
 8000450:	2203      	movs	r2, #3
 8000452:	711a      	strb	r2, [r3, #4]
	Task3.p_TaskEntry = task3;
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <main+0xd0>)
 8000456:	4a19      	ldr	r2, [pc, #100]	; (80004bc <main+0xd4>)
 8000458:	609a      	str	r2, [r3, #8]
	strcpy(Task1.Task_Name , "task3");
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <main+0xbc>)
 800045c:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <main+0xd8>)
 800045e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000462:	6018      	str	r0, [r3, #0]
 8000464:	3304      	adds	r3, #4
 8000466:	8019      	strh	r1, [r3, #0]

	error += MY_RTOS_Creat_Task(&Task1);
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <main+0xb4>)
 800046a:	f7ff ff83 	bl	8000374 <MY_RTOS_Creat_Task>
 800046e:	4603      	mov	r3, r0
 8000470:	461a      	mov	r2, r3
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4413      	add	r3, r2
 8000476:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Creat_Task(&Task2);
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <main+0xc4>)
 800047a:	f7ff ff7b 	bl	8000374 <MY_RTOS_Creat_Task>
 800047e:	4603      	mov	r3, r0
 8000480:	461a      	mov	r2, r3
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4413      	add	r3, r2
 8000486:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Creat_Task(&Task3);
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <main+0xd0>)
 800048a:	f7ff ff73 	bl	8000374 <MY_RTOS_Creat_Task>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4413      	add	r3, r2
 8000496:	71fb      	strb	r3, [r7, #7]


	while (1)
 8000498:	e7fe      	b.n	8000498 <main+0xb0>
 800049a:	bf00      	nop
 800049c:	200003b0 	.word	0x200003b0
 80004a0:	080003d5 	.word	0x080003d5
 80004a4:	200003cc 	.word	0x200003cc
 80004a8:	080007a4 	.word	0x080007a4
 80004ac:	20000438 	.word	0x20000438
 80004b0:	080003db 	.word	0x080003db
 80004b4:	080007ac 	.word	0x080007ac
 80004b8:	200003f4 	.word	0x200003f4
 80004bc:	080003e1 	.word	0x080003e1
 80004c0:	080007b4 	.word	0x080007b4

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 f921 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff ff77 	bl	80003e8 <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000508:	080007c4 	.word	0x080007c4
  ldr r2, =_sbss
 800050c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000510:	200004b8 	.word	0x200004b8

08000514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_2_IRQHandler>
	...

08000518 <EXTI0_IRQHandler>:
//=======================================================================
// 									 ISR Functions
//=======================================================================

void EXTI0_IRQHandler (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI0_IRQHandler+0x1c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI0_IRQHandler+0x1c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <EXTI0_IRQHandler+0x20>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4798      	blx	r3
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400
 8000538:	2000047c 	.word	0x2000047c

0800053c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <EXTI1_IRQHandler+0x1c>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <EXTI1_IRQHandler+0x1c>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <EXTI1_IRQHandler+0x20>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4798      	blx	r3

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010400 	.word	0x40010400
 800055c:	2000047c 	.word	0x2000047c

08000560 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <EXTI2_IRQHandler+0x1c>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <EXTI2_IRQHandler+0x1c>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <EXTI2_IRQHandler+0x20>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4798      	blx	r3

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010400 	.word	0x40010400
 8000580:	2000047c 	.word	0x2000047c

08000584 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <EXTI3_IRQHandler+0x1c>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <EXTI3_IRQHandler+0x1c>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <EXTI3_IRQHandler+0x20>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4798      	blx	r3

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40010400 	.word	0x40010400
 80005a4:	2000047c 	.word	0x2000047c

080005a8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <EXTI4_IRQHandler+0x1c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <EXTI4_IRQHandler+0x1c>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <EXTI4_IRQHandler+0x20>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	4798      	blx	r3

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40010400 	.word	0x40010400
 80005c8:	2000047c 	.word	0x2000047c

080005cc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d008      	beq.n	80005ee <EXTI9_5_IRQHandler+0x22>
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <EXTI9_5_IRQHandler+0xa4>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6);	GP_IRQ_CallBack[6]();}
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d008      	beq.n	800060c <EXTI9_5_IRQHandler+0x40>
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a1b      	ldr	r2, [pc, #108]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <EXTI9_5_IRQHandler+0xa4>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7);	GP_IRQ_CallBack[7]();}
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <EXTI9_5_IRQHandler+0x5e>
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800061e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000622:	6153      	str	r3, [r2, #20]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <EXTI9_5_IRQHandler+0xa4>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8);	GP_IRQ_CallBack[8]();}
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <EXTI9_5_IRQHandler+0x7c>
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800063c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <EXTI9_5_IRQHandler+0xa4>)
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9);	GP_IRQ_CallBack[9]();}
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <EXTI9_5_IRQHandler+0x9a>
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI9_5_IRQHandler+0xa0>)
 800065a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065e:	6153      	str	r3, [r2, #20]
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <EXTI9_5_IRQHandler+0xa4>)
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	4798      	blx	r3

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010400 	.word	0x40010400
 8000670:	2000047c 	.word	0x2000047c

08000674 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10);	GP_IRQ_CallBack[10]();}
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000680:	2b00      	cmp	r3, #0
 8000682:	d008      	beq.n	8000696 <EXTI15_10_IRQHandler+0x22>
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 800068a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800068e:	6153      	str	r3, [r2, #20]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 8000692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000694:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11);	GP_IRQ_CallBack[11]();}
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d008      	beq.n	80006b4 <EXTI15_10_IRQHandler+0x40>
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a22      	ldr	r2, [pc, #136]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b21      	ldr	r3, [pc, #132]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12);	GP_IRQ_CallBack[12]();}
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <EXTI15_10_IRQHandler+0x5e>
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ca:	6153      	str	r3, [r2, #20]
 80006cc:	4b19      	ldr	r3, [pc, #100]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13);	GP_IRQ_CallBack[13]();}
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <EXTI15_10_IRQHandler+0x7c>
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14);	GP_IRQ_CallBack[14]();}
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <EXTI15_10_IRQHandler+0x9a>
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6153      	str	r3, [r2, #20]
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 800070a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800070c:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15);	GP_IRQ_CallBack[15]();}
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d008      	beq.n	800072c <EXTI15_10_IRQHandler+0xb8>
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <EXTI15_10_IRQHandler+0xbc>)
 8000720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b03      	ldr	r3, [pc, #12]	; (8000734 <EXTI15_10_IRQHandler+0xc0>)
 8000728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800072a:	4798      	blx	r3

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40010400 	.word	0x40010400
 8000734:	2000047c 	.word	0x2000047c

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	2500      	movs	r5, #0
 800073c:	4e0c      	ldr	r6, [pc, #48]	; (8000770 <__libc_init_array+0x38>)
 800073e:	4c0d      	ldr	r4, [pc, #52]	; (8000774 <__libc_init_array+0x3c>)
 8000740:	1ba4      	subs	r4, r4, r6
 8000742:	10a4      	asrs	r4, r4, #2
 8000744:	42a5      	cmp	r5, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	f000 f81a 	bl	8000780 <_init>
 800074c:	2500      	movs	r5, #0
 800074e:	4e0a      	ldr	r6, [pc, #40]	; (8000778 <__libc_init_array+0x40>)
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <__libc_init_array+0x44>)
 8000752:	1ba4      	subs	r4, r4, r6
 8000754:	10a4      	asrs	r4, r4, #2
 8000756:	42a5      	cmp	r5, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000760:	4798      	blx	r3
 8000762:	3501      	adds	r5, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800076a:	4798      	blx	r3
 800076c:	3501      	adds	r5, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	080007bc 	.word	0x080007bc
 8000774:	080007bc 	.word	0x080007bc
 8000778:	080007bc 	.word	0x080007bc
 800077c:	080007c0 	.word	0x080007c0

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
