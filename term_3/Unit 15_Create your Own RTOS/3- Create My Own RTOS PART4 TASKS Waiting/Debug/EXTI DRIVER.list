
EXTI DRIVER.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001ae4  08001ae4  00011ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bec  08001bec  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001bec  08001bec  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bec  08001bec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000064  08001c58  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08001c58  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005888  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f12  00000000  00000000  00025915  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012a0  00000000  00000000  00026827  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000300  00000000  00000000  00027ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  00027dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000034bb  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000034f7  00000000  00000000  0002b50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001188d  00000000  00000000  0002ea02  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004028f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fa0  00000000  00000000  0004030c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08001acc 	.word	0x08001acc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08001acc 	.word	0x08001acc

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "Cortex_Mx_OS_Porting.h"

unsigned char SysTickLED;

  void HardFault_Handler(void)
  {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

	  while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:

  }
  void	MemManage_Handler(void)
  {
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	  while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
  }
  void	BusFault_Handler(void)
  {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	  while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
  }
  void	UsageFault_Handler(void)
  {
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	  while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:


  __attribute((naked)) void SVC_Handler ()	//Don't create a stack for this function
  {

  	__asm("TST LR, #0x04 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bbe9 	b.w	8000a18 <OS_SVC_Services>
  			"ITE EQ \n\t"
  			"MRSEQ R0, MSP \n\t"
  			"MRSNE R0, PSP \n\t"
  			"B OS_SVC_Services");
  }
 8000246:	bf00      	nop

08000248 <HW_init>:



  void HW_init()
  {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	  // x = 8000 count


	  //decrease PendSV interrupt priority to be smaller than or equal SysTick Timer.
	  //SysTick have a priority 14
	  __NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

  }
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <OS_trigger_PendSV>:



void OS_trigger_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <OS_trigger_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <OS_trigger_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:




void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 8MHz
	// 1 count -> 0.125 us
	// x count -> 1 ms
	// x = 8000 count

	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]
	MY_RTOS_Update_TaskWaitingTime();
 800029a:	f000 fc63 	bl	8000b64 <MY_RTOS_Update_TaskWaitingTime>
	//determine Pcurrent & Pnext
	Decide_whatNext();
 800029e:	f000 fb69 	bl	8000974 <Decide_whatNext>
	//Switch Context & Restore
	OS_trigger_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <OS_trigger_PendSV>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000090 	.word	0x20000090

080002b0 <FIFO_init>:
#include "MY_RTOS_FIFO.h"


//FIFO APIs
FIFO_Buf_status FIFO_init(FIFO_Buf_t* fifo,element_type* buff,uint32_t length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if (buff==NULL)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_null;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e00f      	b.n	80002e6 <FIFO_init+0x36>

	fifo->base = buff;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = buff;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	609a      	str	r2, [r3, #8]
	fifo->tail = buff;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	68ba      	ldr	r2, [r7, #8]
 80002d6:	611a      	str	r2, [r3, #16]
	fifo->count = 0;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
	fifo->length = length;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]

	return FIFO_no_error;
 80002e4:	2300      	movs	r3, #0

}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <FIFO_enqueue>:
FIFO_Buf_status FIFO_enqueue(FIFO_Buf_t* fifo,element_type* item)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if (!fifo->base || !fifo->head || !fifo->tail)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d007      	beq.n	8000312 <FIFO_enqueue+0x22>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d003      	beq.n	8000312 <FIFO_enqueue+0x22>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d101      	bne.n	8000316 <FIFO_enqueue+0x26>
		return FIFO_null;
 8000312:	2303      	movs	r3, #3
 8000314:	e02f      	b.n	8000376 <FIFO_enqueue+0x86>
	//Check fifo is full or not
	if(FIFO_is_full(fifo) == FIFO_full)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f878 	bl	800040c <FIFO_is_full>
 800031c:	4603      	mov	r3, r0
 800031e:	2b02      	cmp	r3, #2
 8000320:	d101      	bne.n	8000326 <FIFO_enqueue+0x36>
		return FIFO_full;
 8000322:	2302      	movs	r3, #2
 8000324:	e027      	b.n	8000376 <FIFO_enqueue+0x86>
	*(fifo->head)= (item);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	601a      	str	r2, [r3, #0]
	fifo->count++;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	605a      	str	r2, [r3, #4]
	unsigned int ii = ((unsigned int)fifo->base + (fifo->length * sizeof(element_type)));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	461a      	mov	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
	if((unsigned int)fifo->head >= ((unsigned int)fifo->base + (fifo->length * sizeof(element_type))))
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	461a      	mov	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	4619      	mov	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	440b      	add	r3, r1
 800035c:	429a      	cmp	r2, r3
 800035e:	d304      	bcc.n	800036a <FIFO_enqueue+0x7a>
		fifo->head = fifo->base;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	e004      	b.n	8000374 <FIFO_enqueue+0x84>
	else
		fifo->head++;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	1d1a      	adds	r2, r3, #4
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]

	return FIFO_no_error;
 8000374:	2300      	movs	r3, #0


}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <FIFO_dequeue>:
FIFO_Buf_status FIFO_dequeue(FIFO_Buf_t* fifo,element_type* item)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	if (!fifo->base || !fifo->head || !fifo->tail)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d007      	beq.n	80003a2 <FIFO_dequeue+0x22>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <FIFO_dequeue+0x22>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x26>
		return FIFO_null;
 80003a2:	2303      	movs	r3, #3
 80003a4:	e02b      	b.n	80003fe <FIFO_dequeue+0x7e>
	//Check fifo is empty or not
	if(FIFO_is_empty(fifo) == FIFO_empty){
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f000 f854 	bl	8000454 <FIFO_is_empty>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d104      	bne.n	80003bc <FIFO_dequeue+0x3c>
		printf("FIFO is empty\n");
 80003b2:	4815      	ldr	r0, [pc, #84]	; (8000408 <FIFO_dequeue+0x88>)
 80003b4:	f000 ff80 	bl	80012b8 <puts>
		return FIFO_empty;
 80003b8:	2301      	movs	r3, #1
 80003ba:	e020      	b.n	80003fe <FIFO_dequeue+0x7e>
	}
	//dnqueue an item
	*item = *(fifo->tail);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	601a      	str	r2, [r3, #0]
	fifo->count--;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	1e5a      	subs	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	605a      	str	r2, [r3, #4]
	if((unsigned int)fifo->tail >= ((unsigned int)fifo->base + (fifo->length * sizeof(element_type))))
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	461a      	mov	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	4619      	mov	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	440b      	add	r3, r1
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d304      	bcc.n	80003f2 <FIFO_dequeue+0x72>
			fifo->tail = fifo->base;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68da      	ldr	r2, [r3, #12]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	e004      	b.n	80003fc <FIFO_dequeue+0x7c>
		else
			fifo->tail++;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	1d1a      	adds	r2, r3, #4
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	611a      	str	r2, [r3, #16]

return FIFO_no_error;
 80003fc:	2300      	movs	r3, #0


}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	08001ae4 	.word	0x08001ae4

0800040c <FIFO_is_full>:
FIFO_Buf_status FIFO_is_full(FIFO_Buf_t* fifo)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if (!fifo->base || !fifo->head || !fifo->tail)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d007      	beq.n	800042c <FIFO_is_full+0x20>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d003      	beq.n	800042c <FIFO_is_full+0x20>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	691b      	ldr	r3, [r3, #16]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d101      	bne.n	8000430 <FIFO_is_full+0x24>
		return FIFO_null;
 800042c:	2303      	movs	r3, #3
 800042e:	e00b      	b.n	8000448 <FIFO_is_full+0x3c>

	//Check if fifo is full or not
	if(fifo->count == fifo->length){
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	429a      	cmp	r2, r3
 800043a:	d104      	bne.n	8000446 <FIFO_is_full+0x3a>
		printf("FIFO is full\n");
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <FIFO_is_full+0x44>)
 800043e:	f000 ff3b 	bl	80012b8 <puts>
		return FIFO_full;
 8000442:	2302      	movs	r3, #2
 8000444:	e000      	b.n	8000448 <FIFO_is_full+0x3c>
	}
	return FIFO_no_error;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	08001af4 	.word	0x08001af4

08000454 <FIFO_is_empty>:
FIFO_Buf_status FIFO_is_empty(FIFO_Buf_t* fifo)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	if (!fifo->base || !fifo->head || !fifo->tail)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d007      	beq.n	8000474 <FIFO_is_empty+0x20>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d003      	beq.n	8000474 <FIFO_is_empty+0x20>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	691b      	ldr	r3, [r3, #16]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d101      	bne.n	8000478 <FIFO_is_empty+0x24>
		return FIFO_null;
 8000474:	2303      	movs	r3, #3
 8000476:	e006      	b.n	8000486 <FIFO_is_empty+0x32>
	if(fifo->count == 0)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <FIFO_is_empty+0x30>
		return FIFO_empty;
 8000480:	2301      	movs	r3, #1
 8000482:	e000      	b.n	8000486 <FIFO_is_empty+0x32>
	else
		return FIFO_no_error;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:
{
	//=====================================
	// Save the Context of the Current Task
	//=====================================
	// Get the current Task "Current PSP from CPU register" as CPU Push XPSR,....,R0
	OS_GET_PSP(OS_CONROL.Current_Task->Current_PSP);
 8000490:	4b6c      	ldr	r3, [pc, #432]	; (8000644 <PendSV_Handler+0x1b4>)
 8000492:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000496:	f3ef 8009 	mrs	r0, PSP
 800049a:	4602      	mov	r2, r0
 800049c:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) to store (R4 to R11)
	OS_CONROL.Current_Task->Current_PSP-- ;
 800049e:	4b69      	ldr	r3, [pc, #420]	; (8000644 <PendSV_Handler+0x1b4>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699a      	ldr	r2, [r3, #24]
 80004a6:	3a04      	subs	r2, #4
 80004a8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r4" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80004aa:	4b66      	ldr	r3, [pc, #408]	; (8000644 <PendSV_Handler+0x1b4>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4622      	mov	r2, r4
 80004b4:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 80004b6:	4b63      	ldr	r3, [pc, #396]	; (8000644 <PendSV_Handler+0x1b4>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	3a04      	subs	r2, #4
 80004c0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r5" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80004c2:	4b60      	ldr	r3, [pc, #384]	; (8000644 <PendSV_Handler+0x1b4>)
 80004c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	462a      	mov	r2, r5
 80004cc:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 80004ce:	4b5d      	ldr	r3, [pc, #372]	; (8000644 <PendSV_Handler+0x1b4>)
 80004d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	3a04      	subs	r2, #4
 80004d8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r6" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80004da:	4b5a      	ldr	r3, [pc, #360]	; (8000644 <PendSV_Handler+0x1b4>)
 80004dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4632      	mov	r2, r6
 80004e4:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 80004e6:	4b57      	ldr	r3, [pc, #348]	; (8000644 <PendSV_Handler+0x1b4>)
 80004e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ec:	699a      	ldr	r2, [r3, #24]
 80004ee:	3a04      	subs	r2, #4
 80004f0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r7" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80004f2:	4b54      	ldr	r3, [pc, #336]	; (8000644 <PendSV_Handler+0x1b4>)
 80004f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	463a      	mov	r2, r7
 80004fc:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 80004fe:	4b51      	ldr	r3, [pc, #324]	; (8000644 <PendSV_Handler+0x1b4>)
 8000500:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	3a04      	subs	r2, #4
 8000508:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r8" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 800050a:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <PendSV_Handler+0x1b4>)
 800050c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4642      	mov	r2, r8
 8000514:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 8000516:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <PendSV_Handler+0x1b4>)
 8000518:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051c:	699a      	ldr	r2, [r3, #24]
 800051e:	3a04      	subs	r2, #4
 8000520:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r9" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <PendSV_Handler+0x1b4>)
 8000524:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	464a      	mov	r2, r9
 800052c:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 800052e:	4b45      	ldr	r3, [pc, #276]	; (8000644 <PendSV_Handler+0x1b4>)
 8000530:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000534:	699a      	ldr	r2, [r3, #24]
 8000536:	3a04      	subs	r2, #4
 8000538:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r10" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 800053a:	4b42      	ldr	r3, [pc, #264]	; (8000644 <PendSV_Handler+0x1b4>)
 800053c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4652      	mov	r2, sl
 8000544:	601a      	str	r2, [r3, #0]
	OS_CONROL.Current_Task->Current_PSP-- ;
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <PendSV_Handler+0x1b4>)
 8000548:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054c:	699a      	ldr	r2, [r3, #24]
 800054e:	3a04      	subs	r2, #4
 8000550:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0 ,r11" : "=r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <PendSV_Handler+0x1b4>)
 8000554:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	465a      	mov	r2, fp
 800055c:	601a      	str	r2, [r3, #0]
	//already saved in Cureent_PSP

	//=====================================
	// Restore the Context of the Next Task
	//=====================================
	OS_CONROL.Current_Task = OS_CONROL.Next_Task;
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <PendSV_Handler+0x1b4>)
 8000560:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000564:	4a37      	ldr	r2, [pc, #220]	; (8000644 <PendSV_Handler+0x1b4>)
 8000566:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_CONROL.Next_Task = NULL;
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <PendSV_Handler+0x1b4>)
 800056c:	2200      	movs	r2, #0
 800056e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	__asm volatile("mov r11, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 8000572:	4b34      	ldr	r3, [pc, #208]	; (8000644 <PendSV_Handler+0x1b4>)
 8000574:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	469b      	mov	fp, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <PendSV_Handler+0x1b4>)
 8000580:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	3204      	adds	r2, #4
 8000588:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <PendSV_Handler+0x1b4>)
 800058c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	469a      	mov	sl, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <PendSV_Handler+0x1b4>)
 8000598:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	3204      	adds	r2, #4
 80005a0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <PendSV_Handler+0x1b4>)
 80005a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4699      	mov	r9, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <PendSV_Handler+0x1b4>)
 80005b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	3204      	adds	r2, #4
 80005b8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <PendSV_Handler+0x1b4>)
 80005bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4698      	mov	r8, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <PendSV_Handler+0x1b4>)
 80005c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	3204      	adds	r2, #4
 80005d0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <PendSV_Handler+0x1b4>)
 80005d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	461f      	mov	r7, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <PendSV_Handler+0x1b4>)
 80005e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e4:	699a      	ldr	r2, [r3, #24]
 80005e6:	3204      	adds	r2, #4
 80005e8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <PendSV_Handler+0x1b4>)
 80005ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	461e      	mov	r6, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <PendSV_Handler+0x1b4>)
 80005f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	3204      	adds	r2, #4
 8000600:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <PendSV_Handler+0x1b4>)
 8000604:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	461d      	mov	r5, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <PendSV_Handler+0x1b4>)
 8000610:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	3204      	adds	r2, #4
 8000618:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4, %0" : : "r" (*(OS_CONROL.Current_Task->Current_PSP)) );
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <PendSV_Handler+0x1b4>)
 800061c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	461c      	mov	r4, r3
	OS_CONROL.Current_Task->Current_PSP++ ;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <PendSV_Handler+0x1b4>)
 8000628:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	3204      	adds	r2, #4
 8000630:	619a      	str	r2, [r3, #24]


	// Update PSP and exit
	OS_SET_PSP(OS_CONROL.Current_Task->Current_PSP);
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <PendSV_Handler+0x1b4>)
 8000634:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4618      	mov	r0, r3
 800063c:	f380 8809 	msr	PSP, r0
	__asm volatile ("BX LR");
 8000640:	4770      	bx	lr



}
 8000642:	bf00      	nop
 8000644:	200000ac 	.word	0x200000ac

08000648 <MY_RTOS_Create_MainStack>:



void MY_RTOS_Create_MainStack()
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	OS_CONROL._S_MSP_Task =  &_estack;
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <MY_RTOS_Create_MainStack+0x34>)
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MY_RTOS_Create_MainStack+0x38>)
 8000650:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_CONROL._E_MSP_Task = OS_CONROL._S_MSP_Task- Main_Stack_Size;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MY_RTOS_Create_MainStack+0x38>)
 8000656:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800065a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <MY_RTOS_Create_MainStack+0x38>)
 8000660:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Algned 8 Bytes Space between Main Task & PSP Tasks
	OS_CONROL.PSP_Task_Locator = (OS_CONROL._E_MSP_Task - 8);
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MY_RTOS_Create_MainStack+0x38>)
 8000666:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800066a:	3b08      	subs	r3, #8
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <MY_RTOS_Create_MainStack+0x38>)
 800066e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20002800 	.word	0x20002800
 8000680:	200000ac 	.word	0x200000ac

08000684 <MY_RTOS_init>:
MY_RTOS_ErrorID MY_RTOS_init (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = NoError;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]

	//update OS mode (OS_Suspended)
	OS_CONROL.OS_Mode_ID = OS_Suspend;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MY_RTOS_init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//specify the main stack for OS
	MY_RTOS_Create_MainStack();
 8000696:	f7ff ffd7 	bl	8000648 <MY_RTOS_Create_MainStack>
	//Create OS Ready Queue
	if(FIFO_init(&Ready_Queue,Ready_Queue_FIFO,100) != FIFO_no_error)
 800069a:	2264      	movs	r2, #100	; 0x64
 800069c:	4913      	ldr	r1, [pc, #76]	; (80006ec <MY_RTOS_init+0x68>)
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MY_RTOS_init+0x6c>)
 80006a0:	f7ff fe06 	bl	80002b0 <FIFO_init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <MY_RTOS_init+0x2c>
	{
		error += Ready_Queue_init_error;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
	}

	//configure idle Task
	strcpy(MY_RTOS_IDEL_Task.Task_Name,"IDEL_Task");
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MY_RTOS_init+0x70>)
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MY_RTOS_init+0x74>)
 80006b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006b6:	c303      	stmia	r3!, {r0, r1}
 80006b8:	801a      	strh	r2, [r3, #0]
	MY_RTOS_IDEL_Task.priority = 255;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MY_RTOS_init+0x78>)
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	711a      	strb	r2, [r3, #4]
	MY_RTOS_IDEL_Task.p_TaskEntry =MY_RTOS_idel_Task;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MY_RTOS_init+0x78>)
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MY_RTOS_init+0x7c>)
 80006c4:	609a      	str	r2, [r3, #8]
	MY_RTOS_IDEL_Task.stack_size = 300;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MY_RTOS_init+0x78>)
 80006c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006cc:	601a      	str	r2, [r3, #0]

	error += MY_RTOS_Creat_Task(&MY_RTOS_IDEL_Task);
 80006ce:	480b      	ldr	r0, [pc, #44]	; (80006fc <MY_RTOS_init+0x78>)
 80006d0:	f000 f864 	bl	800079c <MY_RTOS_Creat_Task>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4413      	add	r3, r2
 80006dc:	71fb      	strb	r3, [r7, #7]





	return error;
 80006de:	79fb      	ldrb	r3, [r7, #7]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	2000029c 	.word	0x2000029c
 80006f0:	20000094 	.word	0x20000094
 80006f4:	20000274 	.word	0x20000274
 80006f8:	08001b5c 	.word	0x08001b5c
 80006fc:	20000258 	.word	0x20000258
 8000700:	08000705 	.word	0x08000705

08000704 <MY_RTOS_idel_Task>:

unsigned char idel_TaskLED;
void MY_RTOS_idel_Task()
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	while(1)
	{
		idel_TaskLED ^= 1;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <MY_RTOS_idel_Task+0x18>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b02      	ldr	r3, [pc, #8]	; (800071c <MY_RTOS_idel_Task+0x18>)
 8000714:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 8000716:	bf20      	wfe
		idel_TaskLED ^= 1;
 8000718:	e7f6      	b.n	8000708 <MY_RTOS_idel_Task+0x4>
 800071a:	bf00      	nop
 800071c:	200000a8 	.word	0x200000a8

08000720 <MY_RTOS_Create_TaskStack>:
	}
}

void MY_RTOS_Create_TaskStack(Task_ref* Tref)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 * ===========
	 * r5, r6, r7, r8, r9, r10, r11 (Saved/Restored Manually)
	 */
	Tref->Current_PSP = (unsigned int*)Tref->_S_PSP_Task;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	619a      	str	r2, [r3, #24]
	Tref->Current_PSP --;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	1f1a      	subs	r2, r3, #4
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; //Dummy _XPSR should T = 1 to avoid bus fault //0x01000000
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000744:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP --;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	1f1a      	subs	r2, r3, #4
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int) Tref -> p_TaskEntry; //PC
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP --; // LR = 0xFFFFFFFD (EXC_RETURN) Returns to thread with PSP
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	1f1a      	subs	r2, r3, #4
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f06f 0202 	mvn.w	r2, #2
 800076c:	601a      	str	r2, [r3, #0]

	for (int j=0 ; j<13 ; j++) // to intialize all the 13 register (r0 -> r12) to be ZERO
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e00b      	b.n	800078c <MY_RTOS_Create_TaskStack+0x6c>
	{
		Tref ->Current_PSP--;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	1f1a      	subs	r2, r3, #4
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
	for (int j=0 ; j<13 ; j++) // to intialize all the 13 register (r0 -> r12) to be ZERO
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b0c      	cmp	r3, #12
 8000790:	ddf0      	ble.n	8000774 <MY_RTOS_Create_TaskStack+0x54>
	}
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <MY_RTOS_Creat_Task>:

MY_RTOS_ErrorID MY_RTOS_Creat_Task(Task_ref* Tref)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	MY_RTOS_ErrorID error = NoError;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

	// Create it's  own PSP Stack
	Tref -> _S_PSP_Task = OS_CONROL.PSP_Task_Locator;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007aa:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	611a      	str	r2, [r3, #16]
	Tref -> _E_PSP_Task = Tref -> _S_PSP_Task - Tref -> stack_size;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	615a      	str	r2, [r3, #20]


	// Check task stack size exceeded the PSP stack
	if (Tref -> _E_PSP_Task < (unsigned int) (&(_eheap)))
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MY_RTOS_Creat_Task+0x78>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d201      	bcs.n	80007ce <MY_RTOS_Creat_Task+0x32>
	{

		return Task_exceeded_StackSize;
 80007ca:	2302      	movs	r3, #2
 80007cc:	e01b      	b.n	8000806 <MY_RTOS_Creat_Task+0x6a>
	}

	// Aligned 8 bytes between Task PSP and other
	OS_CONROL.PSP_Task_Locator = (Tref->_E_PSP_Task - 8);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	3b08      	subs	r3, #8
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007d6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MY_RTOS_Create_TaskStack(Tref);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffa0 	bl	8000720 <MY_RTOS_Create_TaskStack>

	// Update Scheduler Table
	OS_CONROL.OS_Tasks[OS_CONROL.NoOfActiveTasks] = Tref;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007e2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007e6:	490a      	ldr	r1, [pc, #40]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_CONROL.NoOfActiveTasks++;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007f0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a06      	ldr	r2, [pc, #24]	; (8000810 <MY_RTOS_Creat_Task+0x74>)
 80007f8:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c


	// Task State update -> Suspend
	Tref->Task_State = Suspend;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a


	return error;
 8000804:	7bfb      	ldrb	r3, [r7, #15]

}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000ac 	.word	0x200000ac
 8000814:	20000788 	.word	0x20000788

08000818 <bubbleSort>:


//handler Mode
void bubbleSort()
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_ref* Temp;
	n = OS_CONROL.NoOfActiveTasks;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <bubbleSort+0x88>)
 8000820:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000824:	607b      	str	r3, [r7, #4]
	for(i=0 ; i < n ; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e030      	b.n	800088e <bubbleSort+0x76>
	{
		for(j=0 ;j< n-i-1;j++)
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	e023      	b.n	800087a <bubbleSort+0x62>
		{
			if(OS_CONROL.OS_Tasks[j]->priority > OS_CONROL.OS_Tasks[j+1]->priority)
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <bubbleSort+0x88>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083a:	791a      	ldrb	r2, [r3, #4]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	4917      	ldr	r1, [pc, #92]	; (80008a0 <bubbleSort+0x88>)
 8000842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	d913      	bls.n	8000874 <bubbleSort+0x5c>
			{
				Temp = OS_CONROL.OS_Tasks[j];
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <bubbleSort+0x88>)
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	603b      	str	r3, [r7, #0]
				OS_CONROL.OS_Tasks[j] = OS_CONROL.OS_Tasks[j+1];
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <bubbleSort+0x88>)
 800085c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000860:	490f      	ldr	r1, [pc, #60]	; (80008a0 <bubbleSort+0x88>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_CONROL.OS_Tasks[j +1] = Temp;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3301      	adds	r3, #1
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <bubbleSort+0x88>)
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0 ;j< n-i-1;j++)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3301      	adds	r3, #1
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	3b01      	subs	r3, #1
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3d4      	bcc.n	8000832 <bubbleSort+0x1a>
	for(i=0 ; i < n ; i++)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3ca      	bcc.n	800082c <bubbleSort+0x14>
			}
		}
	}
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	200000ac 	.word	0x200000ac

080008a4 <MY_RTOS_Update_Scheduler_Table>:

//handler mode
void MY_RTOS_Update_Scheduler_Table()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
	Task_ref* Temp = NULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i =0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]

	// 1- bubble sort scheduler table OS_CONTROL-> OS_Tasks[100] (priority high then low)
	bubbleSort();
 80008b2:	f7ff ffb1 	bl	8000818 <bubbleSort>
	// 2- free Ready Queue
	while(FIFO_dequeue(&Ready_Queue, &Temp) != FIFO_empty);
 80008b6:	bf00      	nop
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	482b      	ldr	r0, [pc, #172]	; (800096c <MY_RTOS_Update_Scheduler_Table+0xc8>)
 80008be:	f7ff fd5f 	bl	8000380 <FIFO_dequeue>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1f7      	bne.n	80008b8 <MY_RTOS_Update_Scheduler_Table+0x14>

	// 3- Update Ready Queue
	while(i<OS_CONROL.NoOfActiveTasks)
 80008c8:	e044      	b.n	8000954 <MY_RTOS_Update_Scheduler_Table+0xb0>
	{
		Ptask = OS_CONROL.OS_Tasks[i];
 80008ca:	4a29      	ldr	r2, [pc, #164]	; (8000970 <MY_RTOS_Update_Scheduler_Table+0xcc>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_CONROL.OS_Tasks[i+1];
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <MY_RTOS_Update_Scheduler_Table+0xcc>)
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	607b      	str	r3, [r7, #4]
		if(Ptask->Task_State != Suspend)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d031      	beq.n	800094e <MY_RTOS_Update_Scheduler_Table+0xaa>
		{
			//in case we reached to the end of available OS_Tasks
			if(PnextTask -> Task_State == Suspend)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d108      	bne.n	8000906 <MY_RTOS_Update_Scheduler_Table+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <MY_RTOS_Update_Scheduler_Table+0xc8>)
 80008f8:	f7ff fcfa 	bl	80002f0 <FIFO_enqueue>
				Ptask -> Task_State = Ready;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2203      	movs	r2, #3
 8000900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000904:	e02e      	b.n	8000964 <MY_RTOS_Update_Scheduler_Table+0xc0>
			}

			//if the Ptask priority > PnextTask then (lowest numbers means highest priority)
			if(Ptask -> priority < PnextTask -> priority )
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	791a      	ldrb	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d208      	bcs.n	8000924 <MY_RTOS_Update_Scheduler_Table+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <MY_RTOS_Update_Scheduler_Table+0xc8>)
 8000916:	f7ff fceb 	bl	80002f0 <FIFO_enqueue>
				Ptask -> Task_State = Ready;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	2203      	movs	r2, #3
 800091e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000922:	e01f      	b.n	8000964 <MY_RTOS_Update_Scheduler_Table+0xc0>
			}else if (Ptask -> priority == PnextTask -> priority)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	791a      	ldrb	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	d108      	bne.n	8000942 <MY_RTOS_Update_Scheduler_Table+0x9e>
			{
				//if the Ptask priority == PnextTask then
				//		push Ptask to ready state
				//and make the Ptask = PnextTask and PnextTask++

				FIFO_enqueue(&Ready_Queue, Ptask);
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MY_RTOS_Update_Scheduler_Table+0xc8>)
 8000934:	f7ff fcdc 	bl	80002f0 <FIFO_enqueue>
				Ptask -> Task_State = Ready;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2203      	movs	r2, #3
 800093c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000940:	e005      	b.n	800094e <MY_RTOS_Update_Scheduler_Table+0xaa>

			}else if (Ptask -> priority > PnextTask -> priority)
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	791a      	ldrb	r2, [r3, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	429a      	cmp	r2, r3
 800094c:	d809      	bhi.n	8000962 <MY_RTOS_Update_Scheduler_Table+0xbe>


		}


		i++;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
	while(i<OS_CONROL.NoOfActiveTasks)
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MY_RTOS_Update_Scheduler_Table+0xcc>)
 8000956:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8b4      	bhi.n	80008ca <MY_RTOS_Update_Scheduler_Table+0x26>
	}
}
 8000960:	e000      	b.n	8000964 <MY_RTOS_Update_Scheduler_Table+0xc0>
				break;
 8000962:	bf00      	nop
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000094 	.word	0x20000094
 8000970:	200000ac 	.word	0x200000ac

08000974 <Decide_whatNext>:

//handler mode
void Decide_whatNext()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	//if Ready Queue is empty && OS_CONTROL -> CurrentTask != suspend
	if (Ready_Queue.count == 0 && OS_CONROL.Current_Task -> Task_State != Suspend) //FIFO is empty
 8000978:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <Decide_whatNext+0x98>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11a      	bne.n	80009b6 <Decide_whatNext+0x42>
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <Decide_whatNext+0x9c>)
 8000982:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000986:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <Decide_whatNext+0x42>
	{
		OS_CONROL.Current_Task->Task_State = Running;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <Decide_whatNext+0x9c>)
 8000990:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000994:	2201      	movs	r2, #1
 8000996:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again (round robin)
		FIFO_enqueue(&Ready_Queue, OS_CONROL.Current_Task);
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <Decide_whatNext+0x9c>)
 800099c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009a0:	4619      	mov	r1, r3
 80009a2:	481a      	ldr	r0, [pc, #104]	; (8000a0c <Decide_whatNext+0x98>)
 80009a4:	f7ff fca4 	bl	80002f0 <FIFO_enqueue>
		OS_CONROL.Next_Task = OS_CONROL.Current_Task;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <Decide_whatNext+0x9c>)
 80009aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <Decide_whatNext+0x9c>)
 80009b0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_CONROL.Current_Task);
			OS_CONROL.Current_Task->Task_State =Ready;

		}
	}
}
 80009b4:	e027      	b.n	8000a06 <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_CONROL.Next_Task);
 80009b6:	4917      	ldr	r1, [pc, #92]	; (8000a14 <Decide_whatNext+0xa0>)
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <Decide_whatNext+0x98>)
 80009ba:	f7ff fce1 	bl	8000380 <FIFO_dequeue>
		OS_CONROL.Next_Task->Task_State = Running;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <Decide_whatNext+0x9c>)
 80009c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_CONROL.Current_Task->priority == OS_CONROL.Next_Task->priority) && (OS_CONROL.Current_Task->Task_State != Suspend))
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <Decide_whatNext+0x9c>)
 80009cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009d0:	791a      	ldrb	r2, [r3, #4]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <Decide_whatNext+0x9c>)
 80009d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d113      	bne.n	8000a06 <Decide_whatNext+0x92>
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <Decide_whatNext+0x9c>)
 80009e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00c      	beq.n	8000a06 <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_CONROL.Current_Task);
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <Decide_whatNext+0x9c>)
 80009ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <Decide_whatNext+0x98>)
 80009f6:	f7ff fc7b 	bl	80002f0 <FIFO_enqueue>
			OS_CONROL.Current_Task->Task_State =Ready;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <Decide_whatNext+0x9c>)
 80009fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a00:	2203      	movs	r2, #3
 8000a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	20000250 	.word	0x20000250

08000a18 <OS_SVC_Services>:

// to execute specific service
//handler mode
void OS_SVC_Services(int* StackFrame)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,return Address (PC) and XPSR
	unsigned char SVC_Number;

	SVC_Number = *((unsigned char*)(((unsigned char*) StackFrame[6])-2));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3318      	adds	r3, #24
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3b02      	subs	r3, #2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	73fb      	strb	r3, [r7, #15]
	switch (SVC_Number) {
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db1e      	blt.n	8000a70 <OS_SVC_Services+0x58>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	dd02      	ble.n	8000a3c <OS_SVC_Services+0x24>
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d017      	beq.n	8000a6a <OS_SVC_Services+0x52>
		case SVC_Task_Waiting_Time:
			MY_RTOS_Update_Scheduler_Table();

			break;
		default:
			break;
 8000a3a:	e019      	b.n	8000a70 <OS_SVC_Services+0x58>
			MY_RTOS_Update_Scheduler_Table();
 8000a3c:	f7ff ff32 	bl	80008a4 <MY_RTOS_Update_Scheduler_Table>
			if (OS_CONROL.OS_Mode_ID == OS_Running)
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <OS_SVC_Services+0x68>)
 8000a42:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d114      	bne.n	8000a74 <OS_SVC_Services+0x5c>
				if(strcmp(OS_CONROL.Current_Task->Task_Name , "IDEL_Task") != 0)
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <OS_SVC_Services+0x68>)
 8000a4c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a50:	331c      	adds	r3, #28
 8000a52:	490c      	ldr	r1, [pc, #48]	; (8000a84 <OS_SVC_Services+0x6c>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fb8b 	bl	8000170 <strcmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <OS_SVC_Services+0x5c>
					Decide_whatNext();
 8000a60:	f7ff ff88 	bl	8000974 <Decide_whatNext>
					OS_trigger_PendSV();
 8000a64:	f7ff fbfa 	bl	800025c <OS_trigger_PendSV>
						break;
 8000a68:	e004      	b.n	8000a74 <OS_SVC_Services+0x5c>
			MY_RTOS_Update_Scheduler_Table();
 8000a6a:	f7ff ff1b 	bl	80008a4 <MY_RTOS_Update_Scheduler_Table>
			break;
 8000a6e:	e002      	b.n	8000a76 <OS_SVC_Services+0x5e>
			break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <OS_SVC_Services+0x5e>
						break;
 8000a74:	bf00      	nop
	}
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000ac 	.word	0x200000ac
 8000a84:	08001b5c 	.word	0x08001b5c

08000a88 <MY_RTOS_OS_SVC_Set>:


//Thread Mode
MY_RTOS_OS_SVC_Set(SVC_ID ID)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d005      	beq.n	8000aa4 <MY_RTOS_OS_SVC_Set+0x1c>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d005      	beq.n	8000aa8 <MY_RTOS_OS_SVC_Set+0x20>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d105      	bne.n	8000aac <MY_RTOS_OS_SVC_Set+0x24>
	{
		case SVC_Activate_Task:
			__asm("SVC #0x00");
 8000aa0:	df00      	svc	0

			break;
 8000aa2:	e003      	b.n	8000aac <MY_RTOS_OS_SVC_Set+0x24>
		case SVC_Terminate_Task:
			__asm("SVC #0x01");
 8000aa4:	df01      	svc	1

			break;
 8000aa6:	e001      	b.n	8000aac <MY_RTOS_OS_SVC_Set+0x24>

		case SVC_Task_Waiting_Time:
			__asm("SVC #0x02");
 8000aa8:	df02      	svc	2

			break;
 8000aaa:	bf00      	nop
	}
}
 8000aac:	bf00      	nop
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <MY_RTOS_ActivateTask>:

void MY_RTOS_ActivateTask(Task_ref* Tref)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	Tref ->Task_State = Waitng;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MY_RTOS_OS_SVC_Set(SVC_Activate_Task);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff ffdd 	bl	8000a88 <MY_RTOS_OS_SVC_Set>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <MY_RTOS_TaskWait>:
	Tref ->Task_State = Suspend;
	MY_RTOS_OS_SVC_Set(SVC_Terminate_Task);
}

void MY_RTOS_TaskWait(unsigned int NoTicks, Task_ref* SelfTref)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
	SelfTref->TimngWaiting.Blocking = enable;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	SelfTref->TimngWaiting.Ticks_Count = NoTicks;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
	// Task should be blocked
	SelfTref->Task_State = Suspend;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	// to be suspended immediately
	MY_RTOS_OS_SVC_Set(SVC_Terminate_Task);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ffc6 	bl	8000a88 <MY_RTOS_OS_SVC_Set>

}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <MY_RTOS_STARTOS>:



void MY_RTOS_STARTOS()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	OS_CONROL.OS_Mode_ID = OS_Running;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MY_RTOS_STARTOS+0x58>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//Set Default "Current Task  = Idle Task"
	OS_CONROL.Current_Task = &MY_RTOS_IDEL_Task;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MY_RTOS_STARTOS+0x58>)
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MY_RTOS_STARTOS+0x5c>)
 8000b14:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate IDLE Task
	MY_RTOS_ActivateTask(&MY_RTOS_IDEL_Task);
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MY_RTOS_STARTOS+0x5c>)
 8000b1a:	f7ff ffcd 	bl	8000ab8 <MY_RTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); //1ms
 8000b1e:	f7ff fbab 	bl	8000278 <Start_Ticker>

	OS_SET_PSP(OS_CONROL.Current_Task->Current_PSP);
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MY_RTOS_STARTOS+0x58>)
 8000b24:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f380 8809 	msr	PSP, r0

	//switch Thread Mode SP from MSP to PSP
	OS_SWITCH_SP_TO_PSP;
 8000b30:	f3ef 8014 	mrs	r0, CONTROL
 8000b34:	f04f 0102 	mov.w	r1, #2
 8000b38:	ea40 0001 	orr.w	r0, r0, r1
 8000b3c:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_unprivileged;
 8000b40:	f3ef 8014 	mrs	r0, CONTROL
 8000b44:	f040 0001 	orr.w	r0, r0, #1
 8000b48:	f380 8814 	msr	CONTROL, r0
	OS_CONROL.Current_Task->p_TaskEntry();
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <MY_RTOS_STARTOS+0x58>)
 8000b4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4798      	blx	r3

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000ac 	.word	0x200000ac
 8000b60:	20000258 	.word	0x20000258

08000b64 <MY_RTOS_Update_TaskWaitingTime>:


void MY_RTOS_Update_TaskWaitingTime()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	for(int i =0 ; i < OS_CONROL.NoOfActiveTasks ; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e031      	b.n	8000bd4 <MY_RTOS_Update_TaskWaitingTime+0x70>
	{
		if (OS_CONROL.OS_Tasks[i]->Task_State == Suspend)
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d126      	bne.n	8000bce <MY_RTOS_Update_TaskWaitingTime+0x6a>
		{
			if (OS_CONROL.OS_Tasks[i]->TimngWaiting.Blocking == enable)
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11e      	bne.n	8000bce <MY_RTOS_Update_TaskWaitingTime+0x6a>
			{
				OS_CONROL.OS_Tasks[i]->TimngWaiting.Ticks_Count--;
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9a:	3a01      	subs	r2, #1
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
				if (OS_CONROL.OS_Tasks[i]->TimngWaiting.Ticks_Count == 1)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d110      	bne.n	8000bce <MY_RTOS_Update_TaskWaitingTime+0x6a>
				{
					OS_CONROL.OS_Tasks[i]->TimngWaiting.Blocking = disable;
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_CONROL.OS_Tasks[i]->Task_State = Waitng;
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
					MY_RTOS_OS_SVC_Set(SVC_Task_Waiting_Time);
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f7ff ff5d 	bl	8000a88 <MY_RTOS_OS_SVC_Set>
	for(int i =0 ; i < OS_CONROL.NoOfActiveTasks ; i++)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <MY_RTOS_Update_TaskWaitingTime+0x84>)
 8000bd6:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8c7      	bhi.n	8000b70 <MY_RTOS_Update_TaskWaitingTime+0xc>
				}
			}
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000ac 	.word	0x200000ac

08000bec <task1>:
Task_ref Task1, Task2, Task3,Task4;

unsigned char Task1LED,Task2LED,Task3LED,Task4LED = 0;

void task1()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	unsigned int count=0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
	while(1)
	{
		//Task1 Code
		Task1LED ^= 1 ;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <task1+0x38>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f083 0301 	eor.w	r3, r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <task1+0x38>)
 8000c02:	701a      	strb	r2, [r3, #0]
		count++;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
		if (count == 30){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b1e      	cmp	r3, #30
 8000c0e:	d104      	bne.n	8000c1a <task1+0x2e>
			MY_RTOS_ActivateTask(&Task4);
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <task1+0x3c>)
 8000c12:	f7ff ff51 	bl	8000ab8 <MY_RTOS_ActivateTask>
			count = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
		}
		// 100 ms
		MY_RTOS_TaskWait(100, &Task1);
 8000c1a:	4904      	ldr	r1, [pc, #16]	; (8000c2c <task1+0x40>)
 8000c1c:	2064      	movs	r0, #100	; 0x64
 8000c1e:	f7ff ff5a 	bl	8000ad6 <MY_RTOS_TaskWait>
		Task1LED ^= 1 ;
 8000c22:	e7e8      	b.n	8000bf6 <task1+0xa>
 8000c24:	200004fc 	.word	0x200004fc
 8000c28:	2000042c 	.word	0x2000042c
 8000c2c:	20000470 	.word	0x20000470

08000c30 <task2>:
	}
}

void task2()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task2 Code
		Task2LED ^= 1 ;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <task2+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <task2+0x20>)
 8000c40:	701a      	strb	r2, [r3, #0]
		// 300 ms
		MY_RTOS_TaskWait(300, &Task2);
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <task2+0x24>)
 8000c44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c48:	f7ff ff45 	bl	8000ad6 <MY_RTOS_TaskWait>
		Task2LED ^= 1 ;
 8000c4c:	e7f2      	b.n	8000c34 <task2+0x4>
 8000c4e:	bf00      	nop
 8000c50:	200004b4 	.word	0x200004b4
 8000c54:	20000500 	.word	0x20000500

08000c58 <task3>:
	}
}

void task3()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	while(1)
	{
		//Task3 Code
		Task3LED ^= 1 ;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <task3+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f083 0301 	eor.w	r3, r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <task3+0x20>)
 8000c68:	701a      	strb	r2, [r3, #0]
		// 500 ms
		MY_RTOS_TaskWait(500, &Task3);
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <task3+0x24>)
 8000c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c70:	f7ff ff31 	bl	8000ad6 <MY_RTOS_TaskWait>
		Task3LED ^= 1 ;
 8000c74:	e7f2      	b.n	8000c5c <task3+0x4>
 8000c76:	bf00      	nop
 8000c78:	20000544 	.word	0x20000544
 8000c7c:	200004b8 	.word	0x200004b8

08000c80 <task4>:
	}
}

void task4()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	unsigned int count=0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]

	while(1)
	{
		//Task4 Code
		Task4LED ^= 1 ;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <task4+0x24>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <task4+0x24>)
 8000c96:	701a      	strb	r2, [r3, #0]
		MY_RTOS_TaskWait(1000, &Task4);
 8000c98:	4903      	ldr	r1, [pc, #12]	; (8000ca8 <task4+0x28>)
 8000c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9e:	f7ff ff1a 	bl	8000ad6 <MY_RTOS_TaskWait>
		Task4LED ^= 1 ;
 8000ca2:	e7f2      	b.n	8000c8a <task4+0xa>
 8000ca4:	20000080 	.word	0x20000080
 8000ca8:	2000042c 	.word	0x2000042c

08000cac <main>:
	}
}


int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	MY_RTOS_ErrorID error = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]

	//HW_init (Initialize ClockTree, ResetController )
	HW_init();
 8000cb6:	f7ff fac7 	bl	8000248 <HW_init>

	if(MY_RTOS_init() != NoError)
 8000cba:	f7ff fce3 	bl	8000684 <MY_RTOS_init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d000      	beq.n	8000cc6 <main+0x1a>
		while (1);
 8000cc4:	e7fe      	b.n	8000cc4 <main+0x18>

	Task1.stack_size = 1024;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <main+0xfc>)
 8000cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ccc:	601a      	str	r2, [r3, #0]
	Task1.priority =3;
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <main+0xfc>)
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	711a      	strb	r2, [r3, #4]
	Task1.p_TaskEntry = task1;
 8000cd4:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <main+0xfc>)
 8000cd6:	4a35      	ldr	r2, [pc, #212]	; (8000dac <main+0x100>)
 8000cd8:	609a      	str	r2, [r3, #8]
	strcpy(Task1.Task_Name , "task1");
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <main+0x104>)
 8000cdc:	4a35      	ldr	r2, [pc, #212]	; (8000db4 <main+0x108>)
 8000cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce2:	6018      	str	r0, [r3, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	8019      	strh	r1, [r3, #0]

	Task2.stack_size = 1024;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <main+0x10c>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cee:	601a      	str	r2, [r3, #0]
	Task2.priority =3;
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <main+0x10c>)
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	711a      	strb	r2, [r3, #4]
	Task2.p_TaskEntry = task2;
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x10c>)
 8000cf8:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <main+0x110>)
 8000cfa:	609a      	str	r2, [r3, #8]
	strcpy(Task2.Task_Name , "task2");
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <main+0x114>)
 8000cfe:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <main+0x118>)
 8000d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d04:	6018      	str	r0, [r3, #0]
 8000d06:	3304      	adds	r3, #4
 8000d08:	8019      	strh	r1, [r3, #0]

	Task3.stack_size = 1024;
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <main+0x11c>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	601a      	str	r2, [r3, #0]
	Task3.priority =3;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <main+0x11c>)
 8000d14:	2203      	movs	r2, #3
 8000d16:	711a      	strb	r2, [r3, #4]
	Task3.p_TaskEntry = task3;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <main+0x11c>)
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <main+0x120>)
 8000d1c:	609a      	str	r2, [r3, #8]
	strcpy(Task3.Task_Name , "task3");
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <main+0x124>)
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <main+0x128>)
 8000d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	8019      	strh	r1, [r3, #0]

	Task4.stack_size = 1024;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <main+0x12c>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d32:	601a      	str	r2, [r3, #0]
	Task4.priority =1;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <main+0x12c>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	711a      	strb	r2, [r3, #4]
	Task4.p_TaskEntry = task4;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <main+0x12c>)
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <main+0x130>)
 8000d3e:	609a      	str	r2, [r3, #8]
	strcpy(Task4.Task_Name , "task4");
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <main+0x134>)
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <main+0x138>)
 8000d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d48:	6018      	str	r0, [r3, #0]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	8019      	strh	r1, [r3, #0]

	error += MY_RTOS_Creat_Task(&Task1);
 8000d4e:	4816      	ldr	r0, [pc, #88]	; (8000da8 <main+0xfc>)
 8000d50:	f7ff fd24 	bl	800079c <MY_RTOS_Creat_Task>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Creat_Task(&Task2);
 8000d5e:	4816      	ldr	r0, [pc, #88]	; (8000db8 <main+0x10c>)
 8000d60:	f7ff fd1c 	bl	800079c <MY_RTOS_Creat_Task>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Creat_Task(&Task3);
 8000d6e:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <main+0x11c>)
 8000d70:	f7ff fd14 	bl	800079c <MY_RTOS_Creat_Task>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	71fb      	strb	r3, [r7, #7]
	error += MY_RTOS_Creat_Task(&Task4);
 8000d7e:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <main+0x12c>)
 8000d80:	f7ff fd0c 	bl	800079c <MY_RTOS_Creat_Task>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]

	MY_RTOS_ActivateTask(&Task1);
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <main+0xfc>)
 8000d90:	f7ff fe92 	bl	8000ab8 <MY_RTOS_ActivateTask>
	MY_RTOS_ActivateTask(&Task2);
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <main+0x10c>)
 8000d96:	f7ff fe8f 	bl	8000ab8 <MY_RTOS_ActivateTask>
	MY_RTOS_ActivateTask(&Task3);
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <main+0x11c>)
 8000d9c:	f7ff fe8c 	bl	8000ab8 <MY_RTOS_ActivateTask>


	MY_RTOS_STARTOS();
 8000da0:	f7ff feb0 	bl	8000b04 <MY_RTOS_STARTOS>

	while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0xf8>
 8000da6:	bf00      	nop
 8000da8:	20000470 	.word	0x20000470
 8000dac:	08000bed 	.word	0x08000bed
 8000db0:	2000048c 	.word	0x2000048c
 8000db4:	08001b68 	.word	0x08001b68
 8000db8:	20000500 	.word	0x20000500
 8000dbc:	08000c31 	.word	0x08000c31
 8000dc0:	2000051c 	.word	0x2000051c
 8000dc4:	08001b70 	.word	0x08001b70
 8000dc8:	200004b8 	.word	0x200004b8
 8000dcc:	08000c59 	.word	0x08000c59
 8000dd0:	200004d4 	.word	0x200004d4
 8000dd4:	08001b78 	.word	0x08001b78
 8000dd8:	2000042c 	.word	0x2000042c
 8000ddc:	08000c81 	.word	0x08000c81
 8000de0:	20000448 	.word	0x20000448
 8000de4:	08001b80 	.word	0x08001b80

08000de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
	}

return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e009      	b.n	8000e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf1      	blt.n	8000e34 <_write+0x12>
	}
	return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_close>:

int _close(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e80:	605a      	str	r2, [r3, #4]
	return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <_isatty>:

int _isatty(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
	return 0;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f000 f956 	bl	800119c <__errno>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20002800 	.word	0x20002800
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000084 	.word	0x20000084
 8000f24:	20000588 	.word	0x20000588

08000f28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f2a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <LoopForever+0xe>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <LoopForever+0x16>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f56:	f000 f927 	bl	80011a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5a:	f7ff fea7 	bl	8000cac <main>

08000f5e <LoopForever>:

LoopForever:
    b LoopForever
 8000f5e:	e7fe      	b.n	8000f5e <LoopForever>
  ldr   r0, =_estack
 8000f60:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f6c:	08001bf4 	.word	0x08001bf4
  ldr r2, =_sbss
 8000f70:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f74:	20000588 	.word	0x20000588

08000f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC1_2_IRQHandler>
	...

08000f7c <EXTI0_IRQHandler>:
//=======================================================================
// 									 ISR Functions
//=======================================================================

void EXTI0_IRQHandler (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <EXTI0_IRQHandler+0x1c>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <EXTI0_IRQHandler+0x1c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <EXTI0_IRQHandler+0x20>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4798      	blx	r3
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010400 	.word	0x40010400
 8000f9c:	20000548 	.word	0x20000548

08000fa0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <EXTI1_IRQHandler+0x1c>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <EXTI1_IRQHandler+0x1c>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <EXTI1_IRQHandler+0x20>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4798      	blx	r3

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010400 	.word	0x40010400
 8000fc0:	20000548 	.word	0x20000548

08000fc4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <EXTI2_IRQHandler+0x1c>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <EXTI2_IRQHandler+0x1c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <EXTI2_IRQHandler+0x20>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4798      	blx	r3

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010400 	.word	0x40010400
 8000fe4:	20000548 	.word	0x20000548

08000fe8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <EXTI3_IRQHandler+0x1c>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <EXTI3_IRQHandler+0x1c>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <EXTI3_IRQHandler+0x20>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4798      	blx	r3

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010400 	.word	0x40010400
 8001008:	20000548 	.word	0x20000548

0800100c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <EXTI4_IRQHandler+0x1c>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <EXTI4_IRQHandler+0x1c>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <EXTI4_IRQHandler+0x20>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4798      	blx	r3

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010400 	.word	0x40010400
 800102c:	20000548 	.word	0x20000548

08001030 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();}
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <EXTI9_5_IRQHandler+0x22>
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	6153      	str	r3, [r2, #20]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6);	GP_IRQ_CallBack[6]();}
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <EXTI9_5_IRQHandler+0x40>
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7);	GP_IRQ_CallBack[7]();}
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <EXTI9_5_IRQHandler+0x5e>
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	6153      	str	r3, [r2, #20]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8);	GP_IRQ_CallBack[8]();}
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <EXTI9_5_IRQHandler+0x7c>
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9);	GP_IRQ_CallBack[9]();}
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <EXTI9_5_IRQHandler+0x9a>
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6153      	str	r3, [r2, #20]
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	4798      	blx	r3

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010400 	.word	0x40010400
 80010d4:	20000548 	.word	0x20000548

080010d8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10);	GP_IRQ_CallBack[10]();}
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <EXTI15_10_IRQHandler+0x22>
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6153      	str	r3, [r2, #20]
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11);	GP_IRQ_CallBack[11]();}
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <EXTI15_10_IRQHandler+0x40>
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 800110c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12);	GP_IRQ_CallBack[12]();}
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <EXTI15_10_IRQHandler+0x5e>
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6153      	str	r3, [r2, #20]
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13);	GP_IRQ_CallBack[13]();}
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <EXTI15_10_IRQHandler+0x7c>
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14);	GP_IRQ_CallBack[14]();}
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <EXTI15_10_IRQHandler+0x9a>
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6153      	str	r3, [r2, #20]
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15);	GP_IRQ_CallBack[15]();}
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <EXTI15_10_IRQHandler+0xb8>
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <EXTI15_10_IRQHandler+0xbc>)
 8001184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b03      	ldr	r3, [pc, #12]	; (8001198 <EXTI15_10_IRQHandler+0xc0>)
 800118c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118e:	4798      	blx	r3

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010400 	.word	0x40010400
 8001198:	20000548 	.word	0x20000548

0800119c <__errno>:
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <__errno+0x8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000

080011a8 <__libc_init_array>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	2500      	movs	r5, #0
 80011ac:	4e0c      	ldr	r6, [pc, #48]	; (80011e0 <__libc_init_array+0x38>)
 80011ae:	4c0d      	ldr	r4, [pc, #52]	; (80011e4 <__libc_init_array+0x3c>)
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	42a5      	cmp	r5, r4
 80011b6:	d109      	bne.n	80011cc <__libc_init_array+0x24>
 80011b8:	f000 fc88 	bl	8001acc <_init>
 80011bc:	2500      	movs	r5, #0
 80011be:	4e0a      	ldr	r6, [pc, #40]	; (80011e8 <__libc_init_array+0x40>)
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <__libc_init_array+0x44>)
 80011c2:	1ba4      	subs	r4, r4, r6
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	42a5      	cmp	r5, r4
 80011c8:	d105      	bne.n	80011d6 <__libc_init_array+0x2e>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011d0:	4798      	blx	r3
 80011d2:	3501      	adds	r5, #1
 80011d4:	e7ee      	b.n	80011b4 <__libc_init_array+0xc>
 80011d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011da:	4798      	blx	r3
 80011dc:	3501      	adds	r5, #1
 80011de:	e7f2      	b.n	80011c6 <__libc_init_array+0x1e>
 80011e0:	08001bec 	.word	0x08001bec
 80011e4:	08001bec 	.word	0x08001bec
 80011e8:	08001bec 	.word	0x08001bec
 80011ec:	08001bf0 	.word	0x08001bf0

080011f0 <memset>:
 80011f0:	4603      	mov	r3, r0
 80011f2:	4402      	add	r2, r0
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d100      	bne.n	80011fa <memset+0xa>
 80011f8:	4770      	bx	lr
 80011fa:	f803 1b01 	strb.w	r1, [r3], #1
 80011fe:	e7f9      	b.n	80011f4 <memset+0x4>

08001200 <_puts_r>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	460e      	mov	r6, r1
 8001204:	4605      	mov	r5, r0
 8001206:	b118      	cbz	r0, 8001210 <_puts_r+0x10>
 8001208:	6983      	ldr	r3, [r0, #24]
 800120a:	b90b      	cbnz	r3, 8001210 <_puts_r+0x10>
 800120c:	f000 fa0c 	bl	8001628 <__sinit>
 8001210:	69ab      	ldr	r3, [r5, #24]
 8001212:	68ac      	ldr	r4, [r5, #8]
 8001214:	b913      	cbnz	r3, 800121c <_puts_r+0x1c>
 8001216:	4628      	mov	r0, r5
 8001218:	f000 fa06 	bl	8001628 <__sinit>
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <_puts_r+0xac>)
 800121e:	429c      	cmp	r4, r3
 8001220:	d117      	bne.n	8001252 <_puts_r+0x52>
 8001222:	686c      	ldr	r4, [r5, #4]
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	071b      	lsls	r3, r3, #28
 8001228:	d51d      	bpl.n	8001266 <_puts_r+0x66>
 800122a:	6923      	ldr	r3, [r4, #16]
 800122c:	b1db      	cbz	r3, 8001266 <_puts_r+0x66>
 800122e:	3e01      	subs	r6, #1
 8001230:	68a3      	ldr	r3, [r4, #8]
 8001232:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001236:	3b01      	subs	r3, #1
 8001238:	60a3      	str	r3, [r4, #8]
 800123a:	b9e9      	cbnz	r1, 8001278 <_puts_r+0x78>
 800123c:	2b00      	cmp	r3, #0
 800123e:	da2e      	bge.n	800129e <_puts_r+0x9e>
 8001240:	4622      	mov	r2, r4
 8001242:	210a      	movs	r1, #10
 8001244:	4628      	mov	r0, r5
 8001246:	f000 f83f 	bl	80012c8 <__swbuf_r>
 800124a:	3001      	adds	r0, #1
 800124c:	d011      	beq.n	8001272 <_puts_r+0x72>
 800124e:	200a      	movs	r0, #10
 8001250:	e011      	b.n	8001276 <_puts_r+0x76>
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <_puts_r+0xb0>)
 8001254:	429c      	cmp	r4, r3
 8001256:	d101      	bne.n	800125c <_puts_r+0x5c>
 8001258:	68ac      	ldr	r4, [r5, #8]
 800125a:	e7e3      	b.n	8001224 <_puts_r+0x24>
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_puts_r+0xb4>)
 800125e:	429c      	cmp	r4, r3
 8001260:	bf08      	it	eq
 8001262:	68ec      	ldreq	r4, [r5, #12]
 8001264:	e7de      	b.n	8001224 <_puts_r+0x24>
 8001266:	4621      	mov	r1, r4
 8001268:	4628      	mov	r0, r5
 800126a:	f000 f87f 	bl	800136c <__swsetup_r>
 800126e:	2800      	cmp	r0, #0
 8001270:	d0dd      	beq.n	800122e <_puts_r+0x2e>
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	2b00      	cmp	r3, #0
 800127a:	da04      	bge.n	8001286 <_puts_r+0x86>
 800127c:	69a2      	ldr	r2, [r4, #24]
 800127e:	429a      	cmp	r2, r3
 8001280:	dc06      	bgt.n	8001290 <_puts_r+0x90>
 8001282:	290a      	cmp	r1, #10
 8001284:	d004      	beq.n	8001290 <_puts_r+0x90>
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	6022      	str	r2, [r4, #0]
 800128c:	7019      	strb	r1, [r3, #0]
 800128e:	e7cf      	b.n	8001230 <_puts_r+0x30>
 8001290:	4622      	mov	r2, r4
 8001292:	4628      	mov	r0, r5
 8001294:	f000 f818 	bl	80012c8 <__swbuf_r>
 8001298:	3001      	adds	r0, #1
 800129a:	d1c9      	bne.n	8001230 <_puts_r+0x30>
 800129c:	e7e9      	b.n	8001272 <_puts_r+0x72>
 800129e:	200a      	movs	r0, #10
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	6022      	str	r2, [r4, #0]
 80012a6:	7018      	strb	r0, [r3, #0]
 80012a8:	e7e5      	b.n	8001276 <_puts_r+0x76>
 80012aa:	bf00      	nop
 80012ac:	08001bac 	.word	0x08001bac
 80012b0:	08001bcc 	.word	0x08001bcc
 80012b4:	08001b8c 	.word	0x08001b8c

080012b8 <puts>:
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <puts+0xc>)
 80012ba:	4601      	mov	r1, r0
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	f7ff bf9f 	b.w	8001200 <_puts_r>
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000

080012c8 <__swbuf_r>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	460e      	mov	r6, r1
 80012cc:	4614      	mov	r4, r2
 80012ce:	4605      	mov	r5, r0
 80012d0:	b118      	cbz	r0, 80012da <__swbuf_r+0x12>
 80012d2:	6983      	ldr	r3, [r0, #24]
 80012d4:	b90b      	cbnz	r3, 80012da <__swbuf_r+0x12>
 80012d6:	f000 f9a7 	bl	8001628 <__sinit>
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <__swbuf_r+0x98>)
 80012dc:	429c      	cmp	r4, r3
 80012de:	d12a      	bne.n	8001336 <__swbuf_r+0x6e>
 80012e0:	686c      	ldr	r4, [r5, #4]
 80012e2:	69a3      	ldr	r3, [r4, #24]
 80012e4:	60a3      	str	r3, [r4, #8]
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	071a      	lsls	r2, r3, #28
 80012ea:	d52e      	bpl.n	800134a <__swbuf_r+0x82>
 80012ec:	6923      	ldr	r3, [r4, #16]
 80012ee:	b363      	cbz	r3, 800134a <__swbuf_r+0x82>
 80012f0:	6923      	ldr	r3, [r4, #16]
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	b2f6      	uxtb	r6, r6
 80012f6:	1ac0      	subs	r0, r0, r3
 80012f8:	6963      	ldr	r3, [r4, #20]
 80012fa:	4637      	mov	r7, r6
 80012fc:	4283      	cmp	r3, r0
 80012fe:	dc04      	bgt.n	800130a <__swbuf_r+0x42>
 8001300:	4621      	mov	r1, r4
 8001302:	4628      	mov	r0, r5
 8001304:	f000 f926 	bl	8001554 <_fflush_r>
 8001308:	bb28      	cbnz	r0, 8001356 <__swbuf_r+0x8e>
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	3001      	adds	r0, #1
 800130e:	3b01      	subs	r3, #1
 8001310:	60a3      	str	r3, [r4, #8]
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	6022      	str	r2, [r4, #0]
 8001318:	701e      	strb	r6, [r3, #0]
 800131a:	6963      	ldr	r3, [r4, #20]
 800131c:	4283      	cmp	r3, r0
 800131e:	d004      	beq.n	800132a <__swbuf_r+0x62>
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	07db      	lsls	r3, r3, #31
 8001324:	d519      	bpl.n	800135a <__swbuf_r+0x92>
 8001326:	2e0a      	cmp	r6, #10
 8001328:	d117      	bne.n	800135a <__swbuf_r+0x92>
 800132a:	4621      	mov	r1, r4
 800132c:	4628      	mov	r0, r5
 800132e:	f000 f911 	bl	8001554 <_fflush_r>
 8001332:	b190      	cbz	r0, 800135a <__swbuf_r+0x92>
 8001334:	e00f      	b.n	8001356 <__swbuf_r+0x8e>
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <__swbuf_r+0x9c>)
 8001338:	429c      	cmp	r4, r3
 800133a:	d101      	bne.n	8001340 <__swbuf_r+0x78>
 800133c:	68ac      	ldr	r4, [r5, #8]
 800133e:	e7d0      	b.n	80012e2 <__swbuf_r+0x1a>
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <__swbuf_r+0xa0>)
 8001342:	429c      	cmp	r4, r3
 8001344:	bf08      	it	eq
 8001346:	68ec      	ldreq	r4, [r5, #12]
 8001348:	e7cb      	b.n	80012e2 <__swbuf_r+0x1a>
 800134a:	4621      	mov	r1, r4
 800134c:	4628      	mov	r0, r5
 800134e:	f000 f80d 	bl	800136c <__swsetup_r>
 8001352:	2800      	cmp	r0, #0
 8001354:	d0cc      	beq.n	80012f0 <__swbuf_r+0x28>
 8001356:	f04f 37ff 	mov.w	r7, #4294967295
 800135a:	4638      	mov	r0, r7
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	bf00      	nop
 8001360:	08001bac 	.word	0x08001bac
 8001364:	08001bcc 	.word	0x08001bcc
 8001368:	08001b8c 	.word	0x08001b8c

0800136c <__swsetup_r>:
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <__swsetup_r+0xcc>)
 800136e:	b570      	push	{r4, r5, r6, lr}
 8001370:	681d      	ldr	r5, [r3, #0]
 8001372:	4606      	mov	r6, r0
 8001374:	460c      	mov	r4, r1
 8001376:	b125      	cbz	r5, 8001382 <__swsetup_r+0x16>
 8001378:	69ab      	ldr	r3, [r5, #24]
 800137a:	b913      	cbnz	r3, 8001382 <__swsetup_r+0x16>
 800137c:	4628      	mov	r0, r5
 800137e:	f000 f953 	bl	8001628 <__sinit>
 8001382:	4b2e      	ldr	r3, [pc, #184]	; (800143c <__swsetup_r+0xd0>)
 8001384:	429c      	cmp	r4, r3
 8001386:	d10f      	bne.n	80013a8 <__swsetup_r+0x3c>
 8001388:	686c      	ldr	r4, [r5, #4]
 800138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138e:	b29a      	uxth	r2, r3
 8001390:	0715      	lsls	r5, r2, #28
 8001392:	d42c      	bmi.n	80013ee <__swsetup_r+0x82>
 8001394:	06d0      	lsls	r0, r2, #27
 8001396:	d411      	bmi.n	80013bc <__swsetup_r+0x50>
 8001398:	2209      	movs	r2, #9
 800139a:	6032      	str	r2, [r6, #0]
 800139c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a0:	81a3      	strh	r3, [r4, #12]
 80013a2:	f04f 30ff 	mov.w	r0, #4294967295
 80013a6:	e03e      	b.n	8001426 <__swsetup_r+0xba>
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <__swsetup_r+0xd4>)
 80013aa:	429c      	cmp	r4, r3
 80013ac:	d101      	bne.n	80013b2 <__swsetup_r+0x46>
 80013ae:	68ac      	ldr	r4, [r5, #8]
 80013b0:	e7eb      	b.n	800138a <__swsetup_r+0x1e>
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <__swsetup_r+0xd8>)
 80013b4:	429c      	cmp	r4, r3
 80013b6:	bf08      	it	eq
 80013b8:	68ec      	ldreq	r4, [r5, #12]
 80013ba:	e7e6      	b.n	800138a <__swsetup_r+0x1e>
 80013bc:	0751      	lsls	r1, r2, #29
 80013be:	d512      	bpl.n	80013e6 <__swsetup_r+0x7a>
 80013c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013c2:	b141      	cbz	r1, 80013d6 <__swsetup_r+0x6a>
 80013c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d002      	beq.n	80013d2 <__swsetup_r+0x66>
 80013cc:	4630      	mov	r0, r6
 80013ce:	f000 fa19 	bl	8001804 <_free_r>
 80013d2:	2300      	movs	r3, #0
 80013d4:	6363      	str	r3, [r4, #52]	; 0x34
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	2300      	movs	r3, #0
 80013e0:	6063      	str	r3, [r4, #4]
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	81a3      	strh	r3, [r4, #12]
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	b94b      	cbnz	r3, 8001406 <__swsetup_r+0x9a>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fc:	d003      	beq.n	8001406 <__swsetup_r+0x9a>
 80013fe:	4621      	mov	r1, r4
 8001400:	4630      	mov	r0, r6
 8001402:	f000 f9bf 	bl	8001784 <__smakebuf_r>
 8001406:	89a2      	ldrh	r2, [r4, #12]
 8001408:	f012 0301 	ands.w	r3, r2, #1
 800140c:	d00c      	beq.n	8001428 <__swsetup_r+0xbc>
 800140e:	2300      	movs	r3, #0
 8001410:	60a3      	str	r3, [r4, #8]
 8001412:	6963      	ldr	r3, [r4, #20]
 8001414:	425b      	negs	r3, r3
 8001416:	61a3      	str	r3, [r4, #24]
 8001418:	6923      	ldr	r3, [r4, #16]
 800141a:	b953      	cbnz	r3, 8001432 <__swsetup_r+0xc6>
 800141c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001420:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001424:	d1ba      	bne.n	800139c <__swsetup_r+0x30>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	0792      	lsls	r2, r2, #30
 800142a:	bf58      	it	pl
 800142c:	6963      	ldrpl	r3, [r4, #20]
 800142e:	60a3      	str	r3, [r4, #8]
 8001430:	e7f2      	b.n	8001418 <__swsetup_r+0xac>
 8001432:	2000      	movs	r0, #0
 8001434:	e7f7      	b.n	8001426 <__swsetup_r+0xba>
 8001436:	bf00      	nop
 8001438:	20000000 	.word	0x20000000
 800143c:	08001bac 	.word	0x08001bac
 8001440:	08001bcc 	.word	0x08001bcc
 8001444:	08001b8c 	.word	0x08001b8c

08001448 <__sflush_r>:
 8001448:	898a      	ldrh	r2, [r1, #12]
 800144a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800144e:	4605      	mov	r5, r0
 8001450:	0710      	lsls	r0, r2, #28
 8001452:	460c      	mov	r4, r1
 8001454:	d458      	bmi.n	8001508 <__sflush_r+0xc0>
 8001456:	684b      	ldr	r3, [r1, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dc05      	bgt.n	8001468 <__sflush_r+0x20>
 800145c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	dc02      	bgt.n	8001468 <__sflush_r+0x20>
 8001462:	2000      	movs	r0, #0
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800146a:	2e00      	cmp	r6, #0
 800146c:	d0f9      	beq.n	8001462 <__sflush_r+0x1a>
 800146e:	2300      	movs	r3, #0
 8001470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001474:	682f      	ldr	r7, [r5, #0]
 8001476:	6a21      	ldr	r1, [r4, #32]
 8001478:	602b      	str	r3, [r5, #0]
 800147a:	d032      	beq.n	80014e2 <__sflush_r+0x9a>
 800147c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	075a      	lsls	r2, r3, #29
 8001482:	d505      	bpl.n	8001490 <__sflush_r+0x48>
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	1ac0      	subs	r0, r0, r3
 8001488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800148a:	b10b      	cbz	r3, 8001490 <__sflush_r+0x48>
 800148c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800148e:	1ac0      	subs	r0, r0, r3
 8001490:	2300      	movs	r3, #0
 8001492:	4602      	mov	r2, r0
 8001494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001496:	6a21      	ldr	r1, [r4, #32]
 8001498:	4628      	mov	r0, r5
 800149a:	47b0      	blx	r6
 800149c:	1c43      	adds	r3, r0, #1
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	d106      	bne.n	80014b0 <__sflush_r+0x68>
 80014a2:	6829      	ldr	r1, [r5, #0]
 80014a4:	291d      	cmp	r1, #29
 80014a6:	d848      	bhi.n	800153a <__sflush_r+0xf2>
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <__sflush_r+0x108>)
 80014aa:	40ca      	lsrs	r2, r1
 80014ac:	07d6      	lsls	r6, r2, #31
 80014ae:	d544      	bpl.n	800153a <__sflush_r+0xf2>
 80014b0:	2200      	movs	r2, #0
 80014b2:	6062      	str	r2, [r4, #4]
 80014b4:	6922      	ldr	r2, [r4, #16]
 80014b6:	04d9      	lsls	r1, r3, #19
 80014b8:	6022      	str	r2, [r4, #0]
 80014ba:	d504      	bpl.n	80014c6 <__sflush_r+0x7e>
 80014bc:	1c42      	adds	r2, r0, #1
 80014be:	d101      	bne.n	80014c4 <__sflush_r+0x7c>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b903      	cbnz	r3, 80014c6 <__sflush_r+0x7e>
 80014c4:	6560      	str	r0, [r4, #84]	; 0x54
 80014c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014c8:	602f      	str	r7, [r5, #0]
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d0c9      	beq.n	8001462 <__sflush_r+0x1a>
 80014ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014d2:	4299      	cmp	r1, r3
 80014d4:	d002      	beq.n	80014dc <__sflush_r+0x94>
 80014d6:	4628      	mov	r0, r5
 80014d8:	f000 f994 	bl	8001804 <_free_r>
 80014dc:	2000      	movs	r0, #0
 80014de:	6360      	str	r0, [r4, #52]	; 0x34
 80014e0:	e7c0      	b.n	8001464 <__sflush_r+0x1c>
 80014e2:	2301      	movs	r3, #1
 80014e4:	4628      	mov	r0, r5
 80014e6:	47b0      	blx	r6
 80014e8:	1c41      	adds	r1, r0, #1
 80014ea:	d1c8      	bne.n	800147e <__sflush_r+0x36>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0c5      	beq.n	800147e <__sflush_r+0x36>
 80014f2:	2b1d      	cmp	r3, #29
 80014f4:	d001      	beq.n	80014fa <__sflush_r+0xb2>
 80014f6:	2b16      	cmp	r3, #22
 80014f8:	d101      	bne.n	80014fe <__sflush_r+0xb6>
 80014fa:	602f      	str	r7, [r5, #0]
 80014fc:	e7b1      	b.n	8001462 <__sflush_r+0x1a>
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	81a3      	strh	r3, [r4, #12]
 8001506:	e7ad      	b.n	8001464 <__sflush_r+0x1c>
 8001508:	690f      	ldr	r7, [r1, #16]
 800150a:	2f00      	cmp	r7, #0
 800150c:	d0a9      	beq.n	8001462 <__sflush_r+0x1a>
 800150e:	0793      	lsls	r3, r2, #30
 8001510:	bf18      	it	ne
 8001512:	2300      	movne	r3, #0
 8001514:	680e      	ldr	r6, [r1, #0]
 8001516:	bf08      	it	eq
 8001518:	694b      	ldreq	r3, [r1, #20]
 800151a:	eba6 0807 	sub.w	r8, r6, r7
 800151e:	600f      	str	r7, [r1, #0]
 8001520:	608b      	str	r3, [r1, #8]
 8001522:	f1b8 0f00 	cmp.w	r8, #0
 8001526:	dd9c      	ble.n	8001462 <__sflush_r+0x1a>
 8001528:	4643      	mov	r3, r8
 800152a:	463a      	mov	r2, r7
 800152c:	6a21      	ldr	r1, [r4, #32]
 800152e:	4628      	mov	r0, r5
 8001530:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001532:	47b0      	blx	r6
 8001534:	2800      	cmp	r0, #0
 8001536:	dc06      	bgt.n	8001546 <__sflush_r+0xfe>
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153e:	81a3      	strh	r3, [r4, #12]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	e78e      	b.n	8001464 <__sflush_r+0x1c>
 8001546:	4407      	add	r7, r0
 8001548:	eba8 0800 	sub.w	r8, r8, r0
 800154c:	e7e9      	b.n	8001522 <__sflush_r+0xda>
 800154e:	bf00      	nop
 8001550:	20400001 	.word	0x20400001

08001554 <_fflush_r>:
 8001554:	b538      	push	{r3, r4, r5, lr}
 8001556:	690b      	ldr	r3, [r1, #16]
 8001558:	4605      	mov	r5, r0
 800155a:	460c      	mov	r4, r1
 800155c:	b1db      	cbz	r3, 8001596 <_fflush_r+0x42>
 800155e:	b118      	cbz	r0, 8001568 <_fflush_r+0x14>
 8001560:	6983      	ldr	r3, [r0, #24]
 8001562:	b90b      	cbnz	r3, 8001568 <_fflush_r+0x14>
 8001564:	f000 f860 	bl	8001628 <__sinit>
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <_fflush_r+0x48>)
 800156a:	429c      	cmp	r4, r3
 800156c:	d109      	bne.n	8001582 <_fflush_r+0x2e>
 800156e:	686c      	ldr	r4, [r5, #4]
 8001570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001574:	b17b      	cbz	r3, 8001596 <_fflush_r+0x42>
 8001576:	4621      	mov	r1, r4
 8001578:	4628      	mov	r0, r5
 800157a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800157e:	f7ff bf63 	b.w	8001448 <__sflush_r>
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_fflush_r+0x4c>)
 8001584:	429c      	cmp	r4, r3
 8001586:	d101      	bne.n	800158c <_fflush_r+0x38>
 8001588:	68ac      	ldr	r4, [r5, #8]
 800158a:	e7f1      	b.n	8001570 <_fflush_r+0x1c>
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <_fflush_r+0x50>)
 800158e:	429c      	cmp	r4, r3
 8001590:	bf08      	it	eq
 8001592:	68ec      	ldreq	r4, [r5, #12]
 8001594:	e7ec      	b.n	8001570 <_fflush_r+0x1c>
 8001596:	2000      	movs	r0, #0
 8001598:	bd38      	pop	{r3, r4, r5, pc}
 800159a:	bf00      	nop
 800159c:	08001bac 	.word	0x08001bac
 80015a0:	08001bcc 	.word	0x08001bcc
 80015a4:	08001b8c 	.word	0x08001b8c

080015a8 <std>:
 80015a8:	2300      	movs	r3, #0
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	e9c0 3300 	strd	r3, r3, [r0]
 80015b2:	6083      	str	r3, [r0, #8]
 80015b4:	8181      	strh	r1, [r0, #12]
 80015b6:	6643      	str	r3, [r0, #100]	; 0x64
 80015b8:	81c2      	strh	r2, [r0, #14]
 80015ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015be:	6183      	str	r3, [r0, #24]
 80015c0:	4619      	mov	r1, r3
 80015c2:	2208      	movs	r2, #8
 80015c4:	305c      	adds	r0, #92	; 0x5c
 80015c6:	f7ff fe13 	bl	80011f0 <memset>
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <std+0x38>)
 80015cc:	6224      	str	r4, [r4, #32]
 80015ce:	6263      	str	r3, [r4, #36]	; 0x24
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <std+0x3c>)
 80015d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <std+0x40>)
 80015d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <std+0x44>)
 80015da:	6323      	str	r3, [r4, #48]	; 0x30
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	bf00      	nop
 80015e0:	08001971 	.word	0x08001971
 80015e4:	08001993 	.word	0x08001993
 80015e8:	080019cb 	.word	0x080019cb
 80015ec:	080019ef 	.word	0x080019ef

080015f0 <_cleanup_r>:
 80015f0:	4901      	ldr	r1, [pc, #4]	; (80015f8 <_cleanup_r+0x8>)
 80015f2:	f000 b885 	b.w	8001700 <_fwalk_reent>
 80015f6:	bf00      	nop
 80015f8:	08001555 	.word	0x08001555

080015fc <__sfmoreglue>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	2568      	movs	r5, #104	; 0x68
 8001600:	1e4a      	subs	r2, r1, #1
 8001602:	4355      	muls	r5, r2
 8001604:	460e      	mov	r6, r1
 8001606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800160a:	f000 f947 	bl	800189c <_malloc_r>
 800160e:	4604      	mov	r4, r0
 8001610:	b140      	cbz	r0, 8001624 <__sfmoreglue+0x28>
 8001612:	2100      	movs	r1, #0
 8001614:	e9c0 1600 	strd	r1, r6, [r0]
 8001618:	300c      	adds	r0, #12
 800161a:	60a0      	str	r0, [r4, #8]
 800161c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001620:	f7ff fde6 	bl	80011f0 <memset>
 8001624:	4620      	mov	r0, r4
 8001626:	bd70      	pop	{r4, r5, r6, pc}

08001628 <__sinit>:
 8001628:	6983      	ldr	r3, [r0, #24]
 800162a:	b510      	push	{r4, lr}
 800162c:	4604      	mov	r4, r0
 800162e:	bb33      	cbnz	r3, 800167e <__sinit+0x56>
 8001630:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001634:	6503      	str	r3, [r0, #80]	; 0x50
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <__sinit+0x58>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <__sinit+0x5c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6282      	str	r2, [r0, #40]	; 0x28
 800163e:	4298      	cmp	r0, r3
 8001640:	bf04      	itt	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	6183      	streq	r3, [r0, #24]
 8001646:	f000 f81f 	bl	8001688 <__sfp>
 800164a:	6060      	str	r0, [r4, #4]
 800164c:	4620      	mov	r0, r4
 800164e:	f000 f81b 	bl	8001688 <__sfp>
 8001652:	60a0      	str	r0, [r4, #8]
 8001654:	4620      	mov	r0, r4
 8001656:	f000 f817 	bl	8001688 <__sfp>
 800165a:	2200      	movs	r2, #0
 800165c:	60e0      	str	r0, [r4, #12]
 800165e:	2104      	movs	r1, #4
 8001660:	6860      	ldr	r0, [r4, #4]
 8001662:	f7ff ffa1 	bl	80015a8 <std>
 8001666:	2201      	movs	r2, #1
 8001668:	2109      	movs	r1, #9
 800166a:	68a0      	ldr	r0, [r4, #8]
 800166c:	f7ff ff9c 	bl	80015a8 <std>
 8001670:	2202      	movs	r2, #2
 8001672:	2112      	movs	r1, #18
 8001674:	68e0      	ldr	r0, [r4, #12]
 8001676:	f7ff ff97 	bl	80015a8 <std>
 800167a:	2301      	movs	r3, #1
 800167c:	61a3      	str	r3, [r4, #24]
 800167e:	bd10      	pop	{r4, pc}
 8001680:	08001b88 	.word	0x08001b88
 8001684:	080015f1 	.word	0x080015f1

08001688 <__sfp>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <__sfp+0x70>)
 800168c:	4607      	mov	r7, r0
 800168e:	681e      	ldr	r6, [r3, #0]
 8001690:	69b3      	ldr	r3, [r6, #24]
 8001692:	b913      	cbnz	r3, 800169a <__sfp+0x12>
 8001694:	4630      	mov	r0, r6
 8001696:	f7ff ffc7 	bl	8001628 <__sinit>
 800169a:	3648      	adds	r6, #72	; 0x48
 800169c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	d503      	bpl.n	80016ac <__sfp+0x24>
 80016a4:	6833      	ldr	r3, [r6, #0]
 80016a6:	b133      	cbz	r3, 80016b6 <__sfp+0x2e>
 80016a8:	6836      	ldr	r6, [r6, #0]
 80016aa:	e7f7      	b.n	800169c <__sfp+0x14>
 80016ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80016b0:	b16d      	cbz	r5, 80016ce <__sfp+0x46>
 80016b2:	3468      	adds	r4, #104	; 0x68
 80016b4:	e7f4      	b.n	80016a0 <__sfp+0x18>
 80016b6:	2104      	movs	r1, #4
 80016b8:	4638      	mov	r0, r7
 80016ba:	f7ff ff9f 	bl	80015fc <__sfmoreglue>
 80016be:	6030      	str	r0, [r6, #0]
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d1f1      	bne.n	80016a8 <__sfp+0x20>
 80016c4:	230c      	movs	r3, #12
 80016c6:	4604      	mov	r4, r0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4620      	mov	r0, r4
 80016cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <__sfp+0x74>)
 80016d0:	6665      	str	r5, [r4, #100]	; 0x64
 80016d2:	e9c4 5500 	strd	r5, r5, [r4]
 80016d6:	60a5      	str	r5, [r4, #8]
 80016d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80016dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80016e0:	2208      	movs	r2, #8
 80016e2:	4629      	mov	r1, r5
 80016e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016e8:	f7ff fd82 	bl	80011f0 <memset>
 80016ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016f4:	e7e9      	b.n	80016ca <__sfp+0x42>
 80016f6:	bf00      	nop
 80016f8:	08001b88 	.word	0x08001b88
 80016fc:	ffff0001 	.word	0xffff0001

08001700 <_fwalk_reent>:
 8001700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	4680      	mov	r8, r0
 8001706:	4689      	mov	r9, r1
 8001708:	2600      	movs	r6, #0
 800170a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800170e:	b914      	cbnz	r4, 8001716 <_fwalk_reent+0x16>
 8001710:	4630      	mov	r0, r6
 8001712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001716:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800171a:	3f01      	subs	r7, #1
 800171c:	d501      	bpl.n	8001722 <_fwalk_reent+0x22>
 800171e:	6824      	ldr	r4, [r4, #0]
 8001720:	e7f5      	b.n	800170e <_fwalk_reent+0xe>
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d907      	bls.n	8001738 <_fwalk_reent+0x38>
 8001728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800172c:	3301      	adds	r3, #1
 800172e:	d003      	beq.n	8001738 <_fwalk_reent+0x38>
 8001730:	4629      	mov	r1, r5
 8001732:	4640      	mov	r0, r8
 8001734:	47c8      	blx	r9
 8001736:	4306      	orrs	r6, r0
 8001738:	3568      	adds	r5, #104	; 0x68
 800173a:	e7ee      	b.n	800171a <_fwalk_reent+0x1a>

0800173c <__swhatbuf_r>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460e      	mov	r6, r1
 8001740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001744:	b096      	sub	sp, #88	; 0x58
 8001746:	2900      	cmp	r1, #0
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	da07      	bge.n	800175e <__swhatbuf_r+0x22>
 800174e:	2300      	movs	r3, #0
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	89b3      	ldrh	r3, [r6, #12]
 8001754:	061a      	lsls	r2, r3, #24
 8001756:	d410      	bmi.n	800177a <__swhatbuf_r+0x3e>
 8001758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175c:	e00e      	b.n	800177c <__swhatbuf_r+0x40>
 800175e:	466a      	mov	r2, sp
 8001760:	f000 f96c 	bl	8001a3c <_fstat_r>
 8001764:	2800      	cmp	r0, #0
 8001766:	dbf2      	blt.n	800174e <__swhatbuf_r+0x12>
 8001768:	9a01      	ldr	r2, [sp, #4]
 800176a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800176e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001772:	425a      	negs	r2, r3
 8001774:	415a      	adcs	r2, r3
 8001776:	602a      	str	r2, [r5, #0]
 8001778:	e7ee      	b.n	8001758 <__swhatbuf_r+0x1c>
 800177a:	2340      	movs	r3, #64	; 0x40
 800177c:	2000      	movs	r0, #0
 800177e:	6023      	str	r3, [r4, #0]
 8001780:	b016      	add	sp, #88	; 0x58
 8001782:	bd70      	pop	{r4, r5, r6, pc}

08001784 <__smakebuf_r>:
 8001784:	898b      	ldrh	r3, [r1, #12]
 8001786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001788:	079d      	lsls	r5, r3, #30
 800178a:	4606      	mov	r6, r0
 800178c:	460c      	mov	r4, r1
 800178e:	d507      	bpl.n	80017a0 <__smakebuf_r+0x1c>
 8001790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	6123      	str	r3, [r4, #16]
 8001798:	2301      	movs	r3, #1
 800179a:	6163      	str	r3, [r4, #20]
 800179c:	b002      	add	sp, #8
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	ab01      	add	r3, sp, #4
 80017a2:	466a      	mov	r2, sp
 80017a4:	f7ff ffca 	bl	800173c <__swhatbuf_r>
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	4605      	mov	r5, r0
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 f875 	bl	800189c <_malloc_r>
 80017b2:	b948      	cbnz	r0, 80017c8 <__smakebuf_r+0x44>
 80017b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017b8:	059a      	lsls	r2, r3, #22
 80017ba:	d4ef      	bmi.n	800179c <__smakebuf_r+0x18>
 80017bc:	f023 0303 	bic.w	r3, r3, #3
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	81a3      	strh	r3, [r4, #12]
 80017c6:	e7e3      	b.n	8001790 <__smakebuf_r+0xc>
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <__smakebuf_r+0x7c>)
 80017ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	6020      	str	r0, [r4, #0]
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	81a3      	strh	r3, [r4, #12]
 80017d6:	9b00      	ldr	r3, [sp, #0]
 80017d8:	6120      	str	r0, [r4, #16]
 80017da:	6163      	str	r3, [r4, #20]
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	b15b      	cbz	r3, 80017f8 <__smakebuf_r+0x74>
 80017e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e4:	4630      	mov	r0, r6
 80017e6:	f000 f93b 	bl	8001a60 <_isatty_r>
 80017ea:	b128      	cbz	r0, 80017f8 <__smakebuf_r+0x74>
 80017ec:	89a3      	ldrh	r3, [r4, #12]
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	81a3      	strh	r3, [r4, #12]
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	431d      	orrs	r5, r3
 80017fc:	81a5      	strh	r5, [r4, #12]
 80017fe:	e7cd      	b.n	800179c <__smakebuf_r+0x18>
 8001800:	080015f1 	.word	0x080015f1

08001804 <_free_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4605      	mov	r5, r0
 8001808:	2900      	cmp	r1, #0
 800180a:	d043      	beq.n	8001894 <_free_r+0x90>
 800180c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001810:	1f0c      	subs	r4, r1, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	bfb8      	it	lt
 8001816:	18e4      	addlt	r4, r4, r3
 8001818:	f000 f944 	bl	8001aa4 <__malloc_lock>
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <_free_r+0x94>)
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	4610      	mov	r0, r2
 8001822:	b933      	cbnz	r3, 8001832 <_free_r+0x2e>
 8001824:	6063      	str	r3, [r4, #4]
 8001826:	6014      	str	r4, [r2, #0]
 8001828:	4628      	mov	r0, r5
 800182a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800182e:	f000 b93a 	b.w	8001aa6 <__malloc_unlock>
 8001832:	42a3      	cmp	r3, r4
 8001834:	d90b      	bls.n	800184e <_free_r+0x4a>
 8001836:	6821      	ldr	r1, [r4, #0]
 8001838:	1862      	adds	r2, r4, r1
 800183a:	4293      	cmp	r3, r2
 800183c:	bf01      	itttt	eq
 800183e:	681a      	ldreq	r2, [r3, #0]
 8001840:	685b      	ldreq	r3, [r3, #4]
 8001842:	1852      	addeq	r2, r2, r1
 8001844:	6022      	streq	r2, [r4, #0]
 8001846:	6063      	str	r3, [r4, #4]
 8001848:	6004      	str	r4, [r0, #0]
 800184a:	e7ed      	b.n	8001828 <_free_r+0x24>
 800184c:	4613      	mov	r3, r2
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	b10a      	cbz	r2, 8001856 <_free_r+0x52>
 8001852:	42a2      	cmp	r2, r4
 8001854:	d9fa      	bls.n	800184c <_free_r+0x48>
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	1858      	adds	r0, r3, r1
 800185a:	42a0      	cmp	r0, r4
 800185c:	d10b      	bne.n	8001876 <_free_r+0x72>
 800185e:	6820      	ldr	r0, [r4, #0]
 8001860:	4401      	add	r1, r0
 8001862:	1858      	adds	r0, r3, r1
 8001864:	4282      	cmp	r2, r0
 8001866:	6019      	str	r1, [r3, #0]
 8001868:	d1de      	bne.n	8001828 <_free_r+0x24>
 800186a:	6810      	ldr	r0, [r2, #0]
 800186c:	6852      	ldr	r2, [r2, #4]
 800186e:	4401      	add	r1, r0
 8001870:	6019      	str	r1, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e7d8      	b.n	8001828 <_free_r+0x24>
 8001876:	d902      	bls.n	800187e <_free_r+0x7a>
 8001878:	230c      	movs	r3, #12
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	e7d4      	b.n	8001828 <_free_r+0x24>
 800187e:	6820      	ldr	r0, [r4, #0]
 8001880:	1821      	adds	r1, r4, r0
 8001882:	428a      	cmp	r2, r1
 8001884:	bf01      	itttt	eq
 8001886:	6811      	ldreq	r1, [r2, #0]
 8001888:	6852      	ldreq	r2, [r2, #4]
 800188a:	1809      	addeq	r1, r1, r0
 800188c:	6021      	streq	r1, [r4, #0]
 800188e:	6062      	str	r2, [r4, #4]
 8001890:	605c      	str	r4, [r3, #4]
 8001892:	e7c9      	b.n	8001828 <_free_r+0x24>
 8001894:	bd38      	pop	{r3, r4, r5, pc}
 8001896:	bf00      	nop
 8001898:	20000088 	.word	0x20000088

0800189c <_malloc_r>:
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	1ccd      	adds	r5, r1, #3
 80018a0:	f025 0503 	bic.w	r5, r5, #3
 80018a4:	3508      	adds	r5, #8
 80018a6:	2d0c      	cmp	r5, #12
 80018a8:	bf38      	it	cc
 80018aa:	250c      	movcc	r5, #12
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	4606      	mov	r6, r0
 80018b0:	db01      	blt.n	80018b6 <_malloc_r+0x1a>
 80018b2:	42a9      	cmp	r1, r5
 80018b4:	d903      	bls.n	80018be <_malloc_r+0x22>
 80018b6:	230c      	movs	r3, #12
 80018b8:	6033      	str	r3, [r6, #0]
 80018ba:	2000      	movs	r0, #0
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
 80018be:	f000 f8f1 	bl	8001aa4 <__malloc_lock>
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <_malloc_r+0xac>)
 80018c4:	6814      	ldr	r4, [r2, #0]
 80018c6:	4621      	mov	r1, r4
 80018c8:	b991      	cbnz	r1, 80018f0 <_malloc_r+0x54>
 80018ca:	4c20      	ldr	r4, [pc, #128]	; (800194c <_malloc_r+0xb0>)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	b91b      	cbnz	r3, 80018d8 <_malloc_r+0x3c>
 80018d0:	4630      	mov	r0, r6
 80018d2:	f000 f83d 	bl	8001950 <_sbrk_r>
 80018d6:	6020      	str	r0, [r4, #0]
 80018d8:	4629      	mov	r1, r5
 80018da:	4630      	mov	r0, r6
 80018dc:	f000 f838 	bl	8001950 <_sbrk_r>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d124      	bne.n	800192e <_malloc_r+0x92>
 80018e4:	230c      	movs	r3, #12
 80018e6:	4630      	mov	r0, r6
 80018e8:	6033      	str	r3, [r6, #0]
 80018ea:	f000 f8dc 	bl	8001aa6 <__malloc_unlock>
 80018ee:	e7e4      	b.n	80018ba <_malloc_r+0x1e>
 80018f0:	680b      	ldr	r3, [r1, #0]
 80018f2:	1b5b      	subs	r3, r3, r5
 80018f4:	d418      	bmi.n	8001928 <_malloc_r+0x8c>
 80018f6:	2b0b      	cmp	r3, #11
 80018f8:	d90f      	bls.n	800191a <_malloc_r+0x7e>
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	18cc      	adds	r4, r1, r3
 80018fe:	50cd      	str	r5, [r1, r3]
 8001900:	4630      	mov	r0, r6
 8001902:	f000 f8d0 	bl	8001aa6 <__malloc_unlock>
 8001906:	f104 000b 	add.w	r0, r4, #11
 800190a:	1d23      	adds	r3, r4, #4
 800190c:	f020 0007 	bic.w	r0, r0, #7
 8001910:	1ac3      	subs	r3, r0, r3
 8001912:	d0d3      	beq.n	80018bc <_malloc_r+0x20>
 8001914:	425a      	negs	r2, r3
 8001916:	50e2      	str	r2, [r4, r3]
 8001918:	e7d0      	b.n	80018bc <_malloc_r+0x20>
 800191a:	684b      	ldr	r3, [r1, #4]
 800191c:	428c      	cmp	r4, r1
 800191e:	bf16      	itet	ne
 8001920:	6063      	strne	r3, [r4, #4]
 8001922:	6013      	streq	r3, [r2, #0]
 8001924:	460c      	movne	r4, r1
 8001926:	e7eb      	b.n	8001900 <_malloc_r+0x64>
 8001928:	460c      	mov	r4, r1
 800192a:	6849      	ldr	r1, [r1, #4]
 800192c:	e7cc      	b.n	80018c8 <_malloc_r+0x2c>
 800192e:	1cc4      	adds	r4, r0, #3
 8001930:	f024 0403 	bic.w	r4, r4, #3
 8001934:	42a0      	cmp	r0, r4
 8001936:	d005      	beq.n	8001944 <_malloc_r+0xa8>
 8001938:	1a21      	subs	r1, r4, r0
 800193a:	4630      	mov	r0, r6
 800193c:	f000 f808 	bl	8001950 <_sbrk_r>
 8001940:	3001      	adds	r0, #1
 8001942:	d0cf      	beq.n	80018e4 <_malloc_r+0x48>
 8001944:	6025      	str	r5, [r4, #0]
 8001946:	e7db      	b.n	8001900 <_malloc_r+0x64>
 8001948:	20000088 	.word	0x20000088
 800194c:	2000008c 	.word	0x2000008c

08001950 <_sbrk_r>:
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	2300      	movs	r3, #0
 8001954:	4c05      	ldr	r4, [pc, #20]	; (800196c <_sbrk_r+0x1c>)
 8001956:	4605      	mov	r5, r0
 8001958:	4608      	mov	r0, r1
 800195a:	6023      	str	r3, [r4, #0]
 800195c:	f7ff faae 	bl	8000ebc <_sbrk>
 8001960:	1c43      	adds	r3, r0, #1
 8001962:	d102      	bne.n	800196a <_sbrk_r+0x1a>
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	b103      	cbz	r3, 800196a <_sbrk_r+0x1a>
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	bd38      	pop	{r3, r4, r5, pc}
 800196c:	20000584 	.word	0x20000584

08001970 <__sread>:
 8001970:	b510      	push	{r4, lr}
 8001972:	460c      	mov	r4, r1
 8001974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001978:	f000 f896 	bl	8001aa8 <_read_r>
 800197c:	2800      	cmp	r0, #0
 800197e:	bfab      	itete	ge
 8001980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001982:	89a3      	ldrhlt	r3, [r4, #12]
 8001984:	181b      	addge	r3, r3, r0
 8001986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800198a:	bfac      	ite	ge
 800198c:	6563      	strge	r3, [r4, #84]	; 0x54
 800198e:	81a3      	strhlt	r3, [r4, #12]
 8001990:	bd10      	pop	{r4, pc}

08001992 <__swrite>:
 8001992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001996:	461f      	mov	r7, r3
 8001998:	898b      	ldrh	r3, [r1, #12]
 800199a:	4605      	mov	r5, r0
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	460c      	mov	r4, r1
 80019a0:	4616      	mov	r6, r2
 80019a2:	d505      	bpl.n	80019b0 <__swrite+0x1e>
 80019a4:	2302      	movs	r3, #2
 80019a6:	2200      	movs	r2, #0
 80019a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ac:	f000 f868 	bl	8001a80 <_lseek_r>
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	4632      	mov	r2, r6
 80019b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019b8:	81a3      	strh	r3, [r4, #12]
 80019ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019be:	463b      	mov	r3, r7
 80019c0:	4628      	mov	r0, r5
 80019c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019c6:	f000 b817 	b.w	80019f8 <_write_r>

080019ca <__sseek>:
 80019ca:	b510      	push	{r4, lr}
 80019cc:	460c      	mov	r4, r1
 80019ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d2:	f000 f855 	bl	8001a80 <_lseek_r>
 80019d6:	1c43      	adds	r3, r0, #1
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	bf15      	itete	ne
 80019dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80019de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019e6:	81a3      	strheq	r3, [r4, #12]
 80019e8:	bf18      	it	ne
 80019ea:	81a3      	strhne	r3, [r4, #12]
 80019ec:	bd10      	pop	{r4, pc}

080019ee <__sclose>:
 80019ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f2:	f000 b813 	b.w	8001a1c <_close_r>
	...

080019f8 <_write_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	4605      	mov	r5, r0
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	4c05      	ldr	r4, [pc, #20]	; (8001a18 <_write_r+0x20>)
 8001a04:	6022      	str	r2, [r4, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7ff fa0b 	bl	8000e22 <_write>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	d102      	bne.n	8001a16 <_write_r+0x1e>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	b103      	cbz	r3, 8001a16 <_write_r+0x1e>
 8001a14:	602b      	str	r3, [r5, #0]
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	20000584 	.word	0x20000584

08001a1c <_close_r>:
 8001a1c:	b538      	push	{r3, r4, r5, lr}
 8001a1e:	2300      	movs	r3, #0
 8001a20:	4c05      	ldr	r4, [pc, #20]	; (8001a38 <_close_r+0x1c>)
 8001a22:	4605      	mov	r5, r0
 8001a24:	4608      	mov	r0, r1
 8001a26:	6023      	str	r3, [r4, #0]
 8001a28:	f7ff fa17 	bl	8000e5a <_close>
 8001a2c:	1c43      	adds	r3, r0, #1
 8001a2e:	d102      	bne.n	8001a36 <_close_r+0x1a>
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	b103      	cbz	r3, 8001a36 <_close_r+0x1a>
 8001a34:	602b      	str	r3, [r5, #0]
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
 8001a38:	20000584 	.word	0x20000584

08001a3c <_fstat_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4c06      	ldr	r4, [pc, #24]	; (8001a5c <_fstat_r+0x20>)
 8001a42:	4605      	mov	r5, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	6023      	str	r3, [r4, #0]
 8001a4a:	f7ff fa11 	bl	8000e70 <_fstat>
 8001a4e:	1c43      	adds	r3, r0, #1
 8001a50:	d102      	bne.n	8001a58 <_fstat_r+0x1c>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	b103      	cbz	r3, 8001a58 <_fstat_r+0x1c>
 8001a56:	602b      	str	r3, [r5, #0]
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000584 	.word	0x20000584

08001a60 <_isatty_r>:
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	2300      	movs	r3, #0
 8001a64:	4c05      	ldr	r4, [pc, #20]	; (8001a7c <_isatty_r+0x1c>)
 8001a66:	4605      	mov	r5, r0
 8001a68:	4608      	mov	r0, r1
 8001a6a:	6023      	str	r3, [r4, #0]
 8001a6c:	f7ff fa0f 	bl	8000e8e <_isatty>
 8001a70:	1c43      	adds	r3, r0, #1
 8001a72:	d102      	bne.n	8001a7a <_isatty_r+0x1a>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	b103      	cbz	r3, 8001a7a <_isatty_r+0x1a>
 8001a78:	602b      	str	r3, [r5, #0]
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	20000584 	.word	0x20000584

08001a80 <_lseek_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	4605      	mov	r5, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4c05      	ldr	r4, [pc, #20]	; (8001aa0 <_lseek_r+0x20>)
 8001a8c:	6022      	str	r2, [r4, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fa07 	bl	8000ea2 <_lseek>
 8001a94:	1c43      	adds	r3, r0, #1
 8001a96:	d102      	bne.n	8001a9e <_lseek_r+0x1e>
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	b103      	cbz	r3, 8001a9e <_lseek_r+0x1e>
 8001a9c:	602b      	str	r3, [r5, #0]
 8001a9e:	bd38      	pop	{r3, r4, r5, pc}
 8001aa0:	20000584 	.word	0x20000584

08001aa4 <__malloc_lock>:
 8001aa4:	4770      	bx	lr

08001aa6 <__malloc_unlock>:
 8001aa6:	4770      	bx	lr

08001aa8 <_read_r>:
 8001aa8:	b538      	push	{r3, r4, r5, lr}
 8001aaa:	4605      	mov	r5, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4c05      	ldr	r4, [pc, #20]	; (8001ac8 <_read_r+0x20>)
 8001ab4:	6022      	str	r2, [r4, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f7ff f996 	bl	8000de8 <_read>
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	d102      	bne.n	8001ac6 <_read_r+0x1e>
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	b103      	cbz	r3, 8001ac6 <_read_r+0x1e>
 8001ac4:	602b      	str	r3, [r5, #0]
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	20000584 	.word	0x20000584

08001acc <_init>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	bf00      	nop
 8001ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad2:	bc08      	pop	{r3}
 8001ad4:	469e      	mov	lr, r3
 8001ad6:	4770      	bx	lr

08001ad8 <_fini>:
 8001ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ada:	bf00      	nop
 8001adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ade:	bc08      	pop	{r3}
 8001ae0:	469e      	mov	lr, r3
 8001ae2:	4770      	bx	lr
